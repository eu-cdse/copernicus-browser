[
    {
        "id": "1_TRUE_COLOR",
        "title": "True color",
        "description": "Based on bands 4, 3, 2",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nfunction setup() {\n  return {\n    input: [\"B04\",\"B03\",\"B02\", \"dataMask\"],\n    output: { bands: 4 }\n  };\n}\n\n// Contrast enhance / highlight compress\n\nconst maxR = 3.0; // max reflectance\nconst midR = 0.13;\nconst sat = 1.3;\nconst gamma = 2.3;\n\n// remove the minimum Rayleigh scattering (check the Himalayas)\nconst ray = { r: 0.013, g: 0.024, b: 0.041 };\n\nfunction evaluatePixel(smp) {\n  const rgbLin = satEnh(sAdj(smp.B04 - ray.r), sAdj(smp.B03 - ray.g), sAdj(smp.B02 - ray.b));\n  return [sRGB(rgbLin[0]), sRGB(rgbLin[1]), sRGB(rgbLin[2]), smp.dataMask];\n}\n\nconst sAdj = (a) => adjGamma(adj(a, midR, 1, maxR));\n\nconst gOff = 0.01;\nconst gOffPow = Math.pow(gOff, gamma);\nconst gOffRange = Math.pow(1 + gOff, gamma) - gOffPow;\n\nconst adjGamma = (b) => (Math.pow((b + gOff), gamma) - gOffPow)/gOffRange;\n\n// Saturation enhancement\nfunction satEnh(r, g, b) {\n  const avgS = (r + g + b) / 3.0 * (1 - sat);\n  return [clip(avgS + r * sat), clip(avgS + g * sat), clip(avgS + b * sat)];\n}\n\nconst clip = (s) => s < 0 ? 0 : s > 1 ? 1 : s;\n\n//contrast enhancement with highlight compression\nfunction adj(a, tx, ty, maxC) {\n  var ar = clip(a / maxC, 0, 1);\n  return ar * (ar * (tx/maxC + ty -1) - ty) / (ar * (2 * tx/maxC - 1) - tx/maxC);\n}\n\nconst sRGB = (c) => c <= 0.0031308 ? (12.92 * c) : (1.055 * Math.pow(c, 0.41666666666) - 0.055);"
            }
        ],
        "orderHint": 0,
        "instanceId": "78cd05-YOUR-INSTANCEID-HERE",
        "lastUpdated": "2024-02-02T08:49:52.197338Z",
        "collectionType": "S2L1C",
        "datasetSourceId": 1,
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "upsampling": "BICUBIC",
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 20,
            "previewMode": "EXTENDED_PREVIEW",
            "type": "S2L1C"
        }
    },
    {
        "id": "2_FALSE_COLOR",
        "title": "False color",
        "description": "Based on bands 8, 4, 3",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nlet minVal = 0.0;\nlet maxVal = 0.4;\n\nlet viz = new HighlightCompressVisualizer(minVal, maxVal);\n\nfunction setup() {\n  return {\n    input: [\"B03\", \"B04\", \"B08\",\"dataMask\"],\n    output: { bands: 4 }\n  };\n}\n\n\nfunction evaluatePixel(samples) {\n    let val = [samples.B08, samples.B04, samples.B03,samples.dataMask];\n    return viz.processList(val);\n}"
            }
        ],
        "orderHint": 0,
        "instanceId": "78cd05-YOUR-INSTANCEID-HERE",
        "lastUpdated": "2024-02-02T08:50:01.998640Z",
        "collectionType": "S2L1C",
        "datasetSourceId": 1,
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "upsampling": "BICUBIC",
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 20,
            "previewMode": "EXTENDED_PREVIEW",
            "type": "S2L1C"
        }
    },
    {
        "id": "3_TONEMAPPED-NATURAL-COLOR",
        "title": "Highlight Optimized Natural Color",
        "description": "Enhanced natural color visualisation",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nfunction setup() {\n   return {\n    input: [\"B04\", \"B03\", \"B02\", \"dataMask\"],\n    output: { bands: 4 }\n  };\n}\n\nfunction evaluatePixel(samples) {\n\tvar R = samples.B04 > 0.19595917942 ? Math.cbrt(0.6 * samples.B04) : 2.5 * samples.B04;\n\tvar G = samples.B03 > 0.19595917942 ? Math.cbrt(0.6 * samples.B03) : 2.5 * samples.B03;\n\tvar B = samples.B02 > 0.19595917942 ? Math.cbrt(0.6 * samples.B02) : 2.5 * samples.B02;\n\treturn [R, G, B, samples.dataMask];\n}"
            }
        ],
        "orderHint": 0,
        "instanceId": "78cd05-YOUR-INSTANCEID-HERE",
        "lastUpdated": "2025-01-09T16:22:28.520483Z",
        "collectionType": "S2L1C",
        "datasetSourceId": 1,
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "upsampling": "BICUBIC",
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 50,
            "type": "S2L1C"
        }
    },
    {
        "id": "4_NDSI",
        "title": "NDSI",
        "description": "Based on combination of bands (B3 - B11)/(B3 + B11)",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\n//Reference: https://earth.esa.int/web/sentinel/technical-guides/sentinel-2-msi/level-2a/algorithm\n\nlet viz = new Identity();\n\nfunction setup() {\n  return {\n    input: [\"B03\", \"B11\", \"B04\", \"B02\", \"dataMask\"],\n    output: [\n      { id: \"default\", bands: 4 },\n      { id: \"index\", bands: 1, sampleType: \"FLOAT32\" },\n      { id: \"eobrowserStats\", bands: 2, sampleType: \"FLOAT32\" },\n      { id: \"dataMask\", bands: 1 },\n    ],\n  };\n}\n\nfunction evaluatePixel(samples) {\n  let val = index(samples.B03, samples.B11);\n  let imgVals = null;\n  // The library for tiffs works well only if there is only one channel returned.\n  // So we encode the \"no data\" as NaN here and ignore NaNs on frontend.\n  const indexVal = samples.dataMask === 1 ? val : NaN;\n\n  if (val > 0.42) imgVals = [0, 0.8, 1, samples.dataMask];\n  else\n    imgVals = [\n      2.5 * samples.B04,\n      2.5 * samples.B03,\n      2.5 * samples.B02,\n      samples.dataMask,\n    ];\n\n  const NGDR = index(samples.B03, samples.B04);\n  const bRatio = (samples.B03 - 0.175) / (0.39 - 0.175);\n\n  const isCloud = bRatio > 1 || (bRatio > 0 && NGDR > 0);\n\n  return {\n    default: imgVals,\n    index: [indexVal],\n    eobrowserStats: [val, isCloud ? 1 : 0],\n    dataMask: [samples.dataMask],\n  };\n}\n",
                "legend": {
                    "type": "discrete",
                    "items": [
                        {
                            "color": "rgb(0%, 80%, 100%)",
                            "label": "Snow"
                        }
                    ]
                }
            }
        ],
        "orderHint": 0,
        "instanceId": "78cd05-YOUR-INSTANCEID-HERE",
        "lastUpdated": "2023-10-23T13:36:16.475243Z",
        "collectionType": "S2L1C",
        "datasetSourceId": 1,
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 100,
            "previewMode": "EXTENDED_PREVIEW",
            "type": "S2L1C"
        }
    },
    {
        "id": "5_SNOW-CLASSIFIER",
        "title": "Snow Classifier",
        "description": "Based on NDSI",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nfunction setup () {\n    return{\n        input:[\"B02\", \"B03\", \"B04\", \"B08\", \"B11\", \"dataMask\"],\n        output:{bands: 4}\n    }        \n}\n\nfunction evaluatePixel(sample) {\n    var NDSI = (sample.B03 - sample.B11) / (sample.B03 + sample.B11);\n    var NDVI = (sample.B08 - sample.B04) / (sample.B08 + sample.B04);\n    var gain = 2.5;\n        function si(a) {\n            return (a>=0.4) ? 1 : (Math.abs(NDVI - 0.1) <= 0.025 ? 1 : 0);\n        }\n    \n        function br(a) {\n            return a>0.3;\n        }\n    var v = si(NDSI) && br(sample.B03);\nreturn (v==1) ? [0,0.6,1, sample.dataMask] : [...[sample.B04, sample.B03, sample.B02].map(a => gain * a), sample.dataMask]\n}",
                "legend": {
                    "type": "discrete",
                    "items": [
                        {
                            "color": "rgb(0%, 50%, 100%)",
                            "label": "Snow"
                        }
                    ]
                }
            }
        ],
        "orderHint": 0,
        "instanceId": "78cd05-YOUR-INSTANCEID-HERE",
        "lastUpdated": "2023-10-23T13:36:46.921331Z",
        "collectionType": "S2L1C",
        "datasetSourceId": 1,
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 50,
            "type": "S2L1C"
        }
    },
    {
        "id": "6_AGRICULTURE",
        "title": "Agriculture",
        "description": "Based on the combination of bands 11, 8, 2",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3 (auto-converted from 1)\n\nlet minVal = 0.0;\nlet maxVal = 0.4;\n\nlet viz = new HighlightCompressVisualizer(minVal, maxVal);\n\nfunction evaluatePixel(samples) {\n    let val = [samples.B11, samples.B08, samples.B02, samples.dataMask];\n    return viz.processList(val);\n}\n\nfunction setup() {\n  return {\n    input: [{\n      bands: [ \"B11\", \"B08\", \"B02\", \"dataMask\" ]\n    }],\n    output: { bands: 4 }  }\n}\n"
            }
        ],
        "orderHint": 0,
        "instanceId": "78cd05-YOUR-INSTANCEID-HERE",
        "lastUpdated": "2023-10-23T13:34:46.692185Z",
        "collectionType": "S2L1C",
        "datasetSourceId": 1,
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "upsampling": "BICUBIC",
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 20,
            "type": "S2L1C"
        }
    }
]