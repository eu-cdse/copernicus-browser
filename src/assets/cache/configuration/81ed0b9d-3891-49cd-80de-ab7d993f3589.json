[
    {
        "id": "1_FALSE-COLOR",
        "title": "False Color",
        "description": "Based on bands 8, 4, 3",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nlet minVal = 0.0;\nlet maxVal = 0.4;\n\nlet viz = new HighlightCompressVisualizer(minVal, maxVal);\n\nfunction setup(ds) {\n  return {\n    input: [\"B03\", \"B04\", \"B08\",\"dataMask\"],\n    output: { bands: 4 }\n  };\n}\n\nfunction evaluatePixel(samples) {\n    let val = [samples.B08, samples.B04, samples.B03,samples.dataMask];\n    return viz.processList(val);\n}"
            }
        ],
        "orderHint": 0,
        "instanceId": "81ed0b-YOUR-INSTANCEID-HERE",
        "lastUpdated": "2024-02-02T08:00:34.528598Z",
        "collectionType": "S2L2A",
        "datasetSourceId": 2,
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "upsampling": "BICUBIC",
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 20,
            "type": "S2L2A"
        }
    },
    {
        "id": "ATMOSPHERIC-PENETRATION",
        "title": "Atmospheric Penetration",
        "description": "",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3 (auto-converted from 1)\n\nlet minVal = 0.0;\nlet maxVal = 0.4;\n\nlet viz = new HighlightCompressVisualizer(minVal, maxVal);\n\nfunction evaluatePixel(samples) {\n    let val = [samples.B12, samples.B11, samples.B8A, samples.dataMask];\n    return viz.processList(val);\n}\n\nfunction setup() {\n  return {\n    input: [{\n      bands: [ \"B12\", \"B11\", \"B8A\", \"dataMask\" ]\n    }],\n    output: { bands: 4 }  }\n}"
            }
        ],
        "orderHint": 0,
        "instanceId": "81ed0b-YOUR-INSTANCEID-HERE",
        "lastUpdated": "2023-10-18T08:59:48.645391Z",
        "collectionType": "S2L2A",
        "datasetSourceId": 2,
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 50,
            "type": "S2L2A"
        }
    },
    {
        "id": "BURN-AREA-INDEX-BAI",
        "title": "Burn Area Index (BAI)",
        "description": "",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\n\nlet minVal = 0.0;\nlet maxVal = 100.0;\n\nlet viz = ColorGradientVisualizer.createRedTemperature(minVal, maxVal);\n\nfunction setup() {\n  return {\n    input: [\n      {\n        bands: [\"B03\", \"B04\", \"B08\", \"dataMask\"],\n      },\n    ],\n    output: [\n      { id: \"default\", bands: 4 },\n      { id: \"index\", bands: 1, sampleType: \"FLOAT32\" },\n      { id: \"eobrowserStats\", bands: 2, sampleType: \"FLOAT32\" },\n      { id: \"dataMask\", bands: 1 },\n    ],\n  };\n}\n\nfunction evaluatePixel(samples) {\n  let a = 0.1 - samples.B04;\n  let b = 0.06 - samples.B08;\n\n  let d = a * a + b * b;\n\n  let val = d != 0 ? 1.0 / d : JAVA_DOUBLE_MAX_VAL;\n  let imgVals = null;\n  // The library for tiffs works well only if there is only one channel returned.\n  // So we encode the \"no data\" as NaN here and ignore NaNs on frontend.\n  const indexVal =\n    samples.dataMask === 1 && val >= minVal && val <= maxVal ? val : NaN;\n  imgVals = [...viz.process(val), samples.dataMask];\n\n  return {\n    default: imgVals,\n    index: [indexVal],\n    eobrowserStats: [val, isCloud(samples) ? 1 : 0],\n    dataMask: [samples.dataMask],\n  };\n}\n\nfunction isCloud(samples) {\n  const NGDR = index(samples.B03, samples.B04);\n  const bRatio = (samples.B03 - 0.175) / (0.39 - 0.175);\n  return bRatio > 1 || (bRatio > 0 && NGDR > 0);\n}"
            }
        ],
        "orderHint": 0,
        "instanceId": "81ed0b-YOUR-INSTANCEID-HERE",
        "lastUpdated": "2023-10-18T08:59:37.305633Z",
        "collectionType": "S2L2A",
        "datasetSourceId": 2,
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 20,
            "type": "S2L2A"
        }
    },
    {
        "id": "BURNED-AREAS-DETECTION",
        "title": "Burned Area Detection",
        "description": "",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nfunction setup() {\n    return {\n        input: [\"B02\", \"B03\", \"B04\", \"B08\", \"B11\", \"B12\", \"dataMask\"],\n        output: { bands: 4 }\n      };\n}\n\nfunction evaluatePixel(samples) {\n\tvar NDWI=index(samples.B03, samples.B08); \n\tvar NDVI=index(samples.B08, samples.B04);\n\tvar INDEX= ((samples.B11 - samples.B12) / (samples.B11 + samples.B12))+(samples.B08);\n\n  \tif((INDEX>0.1)||(samples.B02>0.1)||(samples.B11<0.1)||(NDVI>0.3)||(NDWI > 0.1)){\n  \t\treturn[2.5*samples.B04, 2.5*samples.B03, 2.5*samples.B02, samples.dataMask]\n\t}\n\telse {\n \treturn [1, 0, 0, samples.dataMask]\n\t}\n}",
                "legend": {
                    "type": "discrete",
                    "items": [
                        {
                            "color": "rgb(100%, 0%, 0%)",
                            "label": "Burned"
                        }
                    ]
                }
            }
        ],
        "orderHint": 0,
        "instanceId": "81ed0b-YOUR-INSTANCEID-HERE",
        "lastUpdated": "2023-10-23T14:34:28.598197Z",
        "collectionType": "S2L2A",
        "datasetSourceId": 2,
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 50,
            "type": "S2L2A"
        }
    },
    {
        "id": "MOISTURE-INDEX",
        "title": "Moisture Index",
        "description": "Based on combination of bands (B8A - B11)/(B8A + B11)",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nconst moistureRamps = [\n  [-0.8, 0x800000],\n  [-0.24, 0xff0000],\n  [-0.032, 0xffff00],\n  [0.032, 0x00ffff],\n  [0.24, 0x0000ff],\n  [0.8, 0x000080],\n];\n\nconst viz = new ColorRampVisualizer(moistureRamps);\n\nfunction setup() {\n  return {\n    input: [\"B03\", \"B04\", \"B8A\", \"B11\", \"dataMask\"],\n    output: [\n      { id: \"default\", bands: 4 },\n      { id: \"index\", bands: 1, sampleType: \"FLOAT32\" },\n      { id: \"eobrowserStats\", bands: 2, sampleType: \"FLOAT32\" },\n      { id: \"dataMask\", bands: 1 },\n    ],\n  };\n}\n\nfunction evaluatePixel(samples) {\n  let val = index(samples.B8A, samples.B11);\n  // The library for tiffs works well only if there is only one channel returned.\n  // So we encode the \"no data\" as NaN here and ignore NaNs on frontend.\n  const indexVal = samples.dataMask === 1 ? val : NaN;\n  return {\n    default: [...viz.process(val), samples.dataMask],\n    index: [indexVal],\n    eobrowserStats: [val, isCloud(samples) ? 1 : 0],\n    dataMask: [samples.dataMask],\n  };\n}\n\nfunction isCloud(samples) {\n  const NGDR = index(samples.B03, samples.B04);\n  const bRatio = (samples.B03 - 0.175) / (0.39 - 0.175);\n  return bRatio > 1 || (bRatio > 0 && NGDR > 0);\n}\n"
            }
        ],
        "orderHint": 0,
        "instanceId": "81ed0b-YOUR-INSTANCEID-HERE",
        "lastUpdated": "2023-10-23T14:35:06.732419Z",
        "collectionType": "S2L2A",
        "datasetSourceId": 2,
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 50,
            "type": "S2L2A"
        }
    },
    {
        "id": "NORMALIZED-BURN-RATIO-NBR",
        "title": "Normalized Burn Ratio (NBR)",
        "description": "",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\n\nlet viz = ColorGradientVisualizer.createRedTemperature(-0.89, 0.89);\n\nfunction setup() {\n  return {\n    input: [\n      {\n        bands: [\"B03\", \"B04\", \"B08\", \"B12\", \"dataMask\"],\n      },\n    ],\n    output: [\n      { id: \"default\", bands: 4 },\n      { id: \"index\", bands: 1, sampleType: \"FLOAT32\" },\n      { id: \"eobrowserStats\", bands: 2, sampleType: \"FLOAT32\" },\n      { id: \"dataMask\", bands: 1 },\n    ],\n  };\n}\n\nfunction evaluatePixel(samples) {\n  let val = index(samples.B08, samples.B12);\n  let imgVals = null;\n  // The library for tiffs works well only if there is only one channel returned.\n  // So we encode the \"no data\" as NaN here and ignore NaNs on frontend.\n  const indexVal = samples.dataMask === 1 ? val : NaN;\n  imgVals = [...viz.process(val), samples.dataMask];\n  return {\n    default: imgVals,\n    index: [indexVal],\n    eobrowserStats: [val, isCloud(samples) ? 1 : 0],\n    dataMask: [samples.dataMask],\n  };\n}\n\nfunction isCloud(samples) {\n  const NGDR = index(samples.B03, samples.B04);\n  const bRatio = (samples.B03 - 0.175) / (0.39 - 0.175);\n  return bRatio > 1 || (bRatio > 0 && NGDR > 0);\n}"
            }
        ],
        "orderHint": 0,
        "instanceId": "81ed0b-YOUR-INSTANCEID-HERE",
        "lastUpdated": "2023-10-18T08:59:05.885821Z",
        "collectionType": "S2L2A",
        "datasetSourceId": 2,
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 50,
            "type": "S2L2A"
        }
    },
    {
        "id": "NORMALIZED-DIFFERENCE-VEGETATION-INDEX-NDVI",
        "title": "Normalized Difference Vegetation Index (NDVI)",
        "description": "Based on the combination of bands (B8 - B4)/(B8 + B4)",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\n\nfunction setup() {\n  return {\n    input: [\"B03\", \"B04\", \"B08\", \"dataMask\"],\n    output: [\n      { id: \"default\", bands: 4 },\n      { id: \"index\", bands: 1, sampleType: \"FLOAT32\" },\n      { id: \"eobrowserStats\", bands: 2, sampleType: \"FLOAT32\" },\n      { id: \"dataMask\", bands: 1 },\n    ],\n  };\n}\n\nfunction evaluatePixel(samples) {\n  let val = index(samples.B08, samples.B04);\n  let imgVals = null;\n  // The library for tiffs works well only if there is only one channel returned.\n  // So we encode the \"no data\" as NaN here and ignore NaNs on frontend.\n  const indexVal = samples.dataMask === 1 ? val : NaN;\n\n  if (val < -0.5) imgVals = [0.05, 0.05, 0.05, samples.dataMask];\n  else if (val < -0.2) imgVals = [0.75, 0.75, 0.75, samples.dataMask];\n  else if (val < -0.1) imgVals = [0.86, 0.86, 0.86, samples.dataMask];\n  else if (val < 0) imgVals = [0.92, 0.92, 0.92, samples.dataMask];\n  else if (val < 0.025) imgVals = [1, 0.98, 0.8, samples.dataMask];\n  else if (val < 0.05) imgVals = [0.93, 0.91, 0.71, samples.dataMask];\n  else if (val < 0.075) imgVals = [0.87, 0.85, 0.61, samples.dataMask];\n  else if (val < 0.1) imgVals = [0.8, 0.78, 0.51, samples.dataMask];\n  else if (val < 0.125) imgVals = [0.74, 0.72, 0.42, samples.dataMask];\n  else if (val < 0.15) imgVals = [0.69, 0.76, 0.38, samples.dataMask];\n  else if (val < 0.175) imgVals = [0.64, 0.8, 0.35, samples.dataMask];\n  else if (val < 0.2) imgVals = [0.57, 0.75, 0.32, samples.dataMask];\n  else if (val < 0.25) imgVals = [0.5, 0.7, 0.28, samples.dataMask];\n  else if (val < 0.3) imgVals = [0.44, 0.64, 0.25, samples.dataMask];\n  else if (val < 0.35) imgVals = [0.38, 0.59, 0.21, samples.dataMask];\n  else if (val < 0.4) imgVals = [0.31, 0.54, 0.18, samples.dataMask];\n  else if (val < 0.45) imgVals = [0.25, 0.49, 0.14, samples.dataMask];\n  else if (val < 0.5) imgVals = [0.19, 0.43, 0.11, samples.dataMask];\n  else if (val < 0.55) imgVals = [0.13, 0.38, 0.07, samples.dataMask];\n  else if (val < 0.6) imgVals = [0.06, 0.33, 0.04, samples.dataMask];\n  else imgVals = [0, 0.27, 0, samples.dataMask];\n\n  return {\n    default: imgVals,\n    index: [indexVal],\n    eobrowserStats: [val, isCloud(samples) ? 1 : 0],\n    dataMask: [samples.dataMask],\n  };\n}\n\nfunction isCloud(samples) {\n  const NGDR = index(samples.B03, samples.B04);\n  const bRatio = (samples.B03 - 0.175) / (0.39 - 0.175);\n  return bRatio > 1 || (bRatio > 0 && NGDR > 0);\n}\n"
            }
        ],
        "orderHint": 0,
        "instanceId": "81ed0b-YOUR-INSTANCEID-HERE",
        "lastUpdated": "2023-10-23T14:35:34.196208Z",
        "collectionType": "S2L2A",
        "datasetSourceId": 2,
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 20,
            "type": "S2L2A"
        }
    },
    {
        "id": "SWIR",
        "title": "SWIR",
        "description": "Based on bands 12,8A,4",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nlet minVal = 0.0;\nlet maxVal = 0.4;\n\nlet viz = new HighlightCompressVisualizer(minVal, maxVal);\n\nfunction setup() {\n  return {\n    input: [\"B12\", \"B8A\", \"B04\", \"dataMask\"],\n    output: { bands: 4 }\n  };\n}\n\nfunction evaluatePixel(samples) {\n    let val = [samples.B12, samples.B8A, samples.B04, samples.dataMask];\n    return viz.processList(val);\n}"
            }
        ],
        "orderHint": 0,
        "instanceId": "81ed0b-YOUR-INSTANCEID-HERE",
        "lastUpdated": "2024-10-10T09:05:23.781330Z",
        "collectionType": "S2L2A",
        "datasetSourceId": 2,
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 50,
            "type": "S2L2A"
        }
    },
    {
        "id": "TRUE-COLOR",
        "title": "True color",
        "description": "Based on bands 4,3,2",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nfunction setup() {\n  return {\n    input: [\"B04\",\"B03\",\"B02\", \"dataMask\"],\n    output: { bands: 4 }\n  };\n}\n\n// Contrast enhance / highlight compress\n\nconst maxR = 3.0; // max reflectance\nconst midR = 0.13;\nconst sat = 1.2;\nconst gamma = 1.8;\n\nfunction evaluatePixel(smp) {\n  const rgbLin = satEnh(sAdj(smp.B04), sAdj(smp.B03), sAdj(smp.B02));\n  return [sRGB(rgbLin[0]), sRGB(rgbLin[1]), sRGB(rgbLin[2]), smp.dataMask];\n}\n\nfunction sAdj(a) {\n  return adjGamma(adj(a, midR, 1, maxR));\n}\n\nconst gOff = 0.01;\nconst gOffPow = Math.pow(gOff, gamma);\nconst gOffRange = Math.pow(1 + gOff, gamma) - gOffPow;\n\nfunction adjGamma(b) {\n  return (Math.pow((b + gOff), gamma) - gOffPow)/gOffRange;\n}\n\n// Saturation enhancement\nfunction satEnh(r, g, b) {\n  const avgS = (r + g + b) / 3.0 * (1 - sat);\n  return [clip(avgS + r * sat), clip(avgS + g * sat), clip(avgS + b * sat)];\n}\n\nfunction clip(s) {\n  return s < 0 ? 0 : s > 1 ? 1 : s;\n}\n\n//contrast enhancement with highlight compression\nfunction adj(a, tx, ty, maxC) {\n  var ar = clip(a / maxC, 0, 1);\n  return ar * (ar * (tx/maxC + ty -1) - ty) / (ar * (2 * tx/maxC - 1) - tx/maxC);\n}\n\nconst sRGB = (c) => c <= 0.0031308 ? (12.92 * c) : (1.055 * Math.pow(c, 0.41666666666) - 0.055);\n"
            }
        ],
        "orderHint": 0,
        "instanceId": "81ed0b-YOUR-INSTANCEID-HERE",
        "lastUpdated": "2024-02-02T08:00:20.258434Z",
        "collectionType": "S2L2A",
        "datasetSourceId": 2,
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "upsampling": "BICUBIC",
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 20,
            "type": "S2L2A"
        }
    },
    {
        "id": "WILDFIRES-PIERRE-MARKUSE",
        "title": "Wildfires",
        "description": "",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "// VERSION=3\n// QuickFire V1.0.0 by Pierre Markuse (https://twitter.com/Pierre_Markuse)\n// Adjusted for use in the Copernicus Browser (https://dataspace.copernicus.eu/browser/)\n// CC BY 4.0 International (https://creativecommons.org/licenses/by/4.0/)\n\n// Copernicus Browser does not have the band CLP, this was replaced with the isCloud() function\n// but do try to turn off cloudAvoidance if results aren't as expected.\n\nfunction setup() {\n    return {\n        input: [\"B02\", \"B03\", \"B04\", \"B08\", \"B8A\", \"B11\", \"B12\", \"dataMask\"],\n        output: { bands: 4 }\n    };\n}\n\nfunction isCloud(samples) {\n    const NGDR = index(samples.B03, samples.B04);\n    const bRatio = (samples.B03 - 0.175) / (0.39 - 0.175);\n    return bRatio > 1 || (bRatio > 0 && NGDR > 0);\n}\n\nfunction stretch(val, min, max) { return (val - min) / (max - min); }\n\nfunction satEnh(arr, s) {\n    var avg = arr.reduce((a, b) => a + b, 0) / arr.length;\n    return arr.map(a => avg * (1 - s) + a * s);\n}\n\nfunction layerBlend(lay1, lay2, lay3, op1, op2, op3) {\n    return lay1.map(function (num, index) {\n        return (num / 100 * op1 + (lay2[index] / 100 * op2) + (lay3[index] / 100 * op3));\n    });\n}\n\nfunction evaluatePixel(sample) {\n    const hsThreshold = [2.0, 1.5, 1.25, 1.0];\n    const hotspot = 1;\n    const style = 1;\n    const hsSensitivity = 1.0;\n    const boost = 1.2;\n\n    const cloudAvoidance = 1;\n    const avoidanceHelper = 0.8;\n\n    const offset = -0.007;\n    const saturation = 1.10;\n    const brightness = 1.40;\n    const sMin = 0.15;\n    const sMax = 0.99;\n\n    const showBurnscars = 0;\n    const burnscarThreshold = -0.25;\n    const burnscarStrength = 0.3;\n\n    const NDWI = (sample.B03 - sample.B08) / (sample.B03 + sample.B08);\n    const NDVI = (sample.B08 - sample.B04) / (sample.B08 + sample.B04);\n    const waterHighlight = 0;\n    const waterBoost = 2.0;\n    const NDVI_threshold = 0.05;\n    const NDWI_threshold = 0.0;\n    const waterHelper = 0.1;\n\n    const Black = [0, 0, 0];\n    const NBRindex = (sample.B08 - sample.B12) / (sample.B08 + sample.B12);\n    const naturalColorsCC = [Math.sqrt(brightness * sample.B04 + offset), Math.sqrt(brightness * sample.B03 + offset), Math.sqrt(brightness * sample.B02 + offset)];\n    const naturalColors = [(2.5 * brightness * sample.B04 + offset), (2.5 * brightness * sample.B03 + offset), (2.5 * brightness * sample.B02 + offset)];\n    const URBAN = [Math.sqrt(brightness * sample.B12 * 1.2 + offset), Math.sqrt(brightness * sample.B11 * 1.4 + offset), Math.sqrt(brightness * sample.B04 + offset)];\n    const SWIR = [Math.sqrt(brightness * sample.B12 + offset), Math.sqrt(brightness * sample.B8A + offset), Math.sqrt(brightness * sample.B04 + offset)];\n    const NIRblue = colorBlend(sample.B08, [0, 0.25, 1], [[0 / 255, 0 / 255, 0 / 255], [0 / 255, 100 / 255, 175 / 255], [150 / 255, 230 / 255, 255 / 255]]);\n    const classicFalse = [sample.B08 * brightness, sample.B04 * brightness, sample.B03 * brightness];\n    const NIR = [sample.B08 * brightness, sample.B08 * brightness, sample.B08 * brightness];\n    const atmoPen = [sample.B12 * brightness, sample.B11 * brightness, sample.B08 * brightness];\n    var enhNaturalColors = [0, 0, 0];\n    for (let i = 0; i < 3; i += 1) { enhNaturalColors[i] = (brightness * ((naturalColors[i] + naturalColorsCC[i]) / 2) + (URBAN[i] / 10)); }\n\n    const manualCorrection = [0.04, 0.00, -0.05];\n\n    var Viz = layerBlend(URBAN, SWIR, naturalColorsCC, 10, 10, 90); // Choose visualization(s) and opacity here\n\n    if (waterHighlight) {\n        if ((NDVI < NDVI_threshold) && (NDWI > NDWI_threshold) && (sample.B04 < waterHelper)) {\n            Viz[1] = Viz[1] * 1.2 * waterBoost + 0.1;\n            Viz[2] = Viz[2] * 1.5 * waterBoost + 0.2;\n        }\n    }\n\n    Viz = satEnh(Viz, saturation);\n    for (let i = 0; i < 3; i += 1) {\n        Viz[i] = stretch(Viz[i], sMin, sMax);\n        Viz[i] += manualCorrection[i];\n    }\n\n    if (hotspot) {\n        if ((!cloudAvoidance) || (!isCloud(sample) && (sample.B02 < avoidanceHelper))) {\n            switch (style) {\n                case 1:\n                    if ((sample.B12 + sample.B11) > (hsThreshold[0] / hsSensitivity)) return [((boost * 0.50 * sample.B12) + Viz[0]), ((boost * 0.50 * sample.B11) + Viz[1]), Viz[2], sample.dataMask];\n                    if ((sample.B12 + sample.B11) > (hsThreshold[1] / hsSensitivity)) return [((boost * 0.50 * sample.B12) + Viz[0]), ((boost * 0.20 * sample.B11) + Viz[1]), Viz[2], sample.dataMask];\n                    if ((sample.B12 + sample.B11) > (hsThreshold[2] / hsSensitivity)) return [((boost * 0.50 * sample.B12) + Viz[0]), ((boost * 0.10 * sample.B11) + Viz[1]), Viz[2], sample.dataMask];\n                    if ((sample.B12 + sample.B11) > (hsThreshold[3] / hsSensitivity)) return [((boost * 0.50 * sample.B12) + Viz[0]), ((boost * 0.00 * sample.B11) + Viz[1]), Viz[2], sample.dataMask];\n                    break;\n                case 2:\n                    if ((sample.B12 + sample.B11) > (hsThreshold[3] / hsSensitivity)) return [1, 0, 0, sample.dataMask];\n                    break;\n                case 3:\n                    if ((sample.B12 + sample.B11) > (hsThreshold[3] / hsSensitivity)) return [1, 1, 0, sample.dataMask];\n                    break;\n                case 4:\n                    if ((sample.B12 + sample.B11) > (hsThreshold[3] / hsSensitivity)) return [Viz[0] + 0.2, Viz[1] - 0.2, Viz[2] - 0.2, sample.dataMask];\n                    break;\n                default:\n            }\n        }\n    }\n\n    if (showBurnscars) {\n        if (NBRindex < burnscarThreshold) {\n            Viz[0] = Viz[0] + burnscarStrength;\n            Viz[1] = Viz[1] + burnscarStrength;\n        }\n    }\n\n    return [Viz[0], Viz[1], Viz[2], sample.dataMask];\n}"
            }
        ],
        "orderHint": 0,
        "instanceId": "81ed0b-YOUR-INSTANCEID-HERE",
        "lastUpdated": "2024-10-08T07:58:52.647004Z",
        "collectionType": "S2L2A",
        "datasetSourceId": 2,
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "maxCloudCoverage": 50,
            "type": "S2L2A"
        }
    }
]