[
    {
        "id": "Bare_Cover_Fraction",
        "title": "Fractional Cover: Bare",
        "description": "Percentage of 100m pixel that is covered by bare ground",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nconst factor = 1;\nconst offset = 0;\n\nfunction setup() {\n  return {\n    input: [\"Bare_Cover_Fraction\", \"dataMask\"],\n    output: [\n      { id: \"default\", bands: 4, sampleType: \"UINT8\" },\n      { id: \"index\", bands: 1, sampleType: \"FLOAT32\" },\n      { id: \"eobrowserStats\", bands: 2, sampleType: \"FLOAT32\" },\n      { id: \"dataMask\", bands: 1 },\n    ],\n  };\n}\n\nfunction evaluatePixel(samples) {\n  var originalValue = samples.Bare_Cover_Fraction;\n\n  let val = originalValue * factor + offset;\n\n  let dataMask = samples.dataMask;\n\n  const indexVal = dataMask === 1 ? val : NaN;\n  const imgVals = visualizer.process(originalValue);\n\n  return {\n    default: imgVals.concat(dataMask * 255),\n    index: [indexVal],\n    eobrowserStats: [val, dataMask],\n    dataMask: [dataMask],\n  };\n}\n\n// EDIT COLOR BAR\nconst ColorBar = [\n  [0, [68, 1, 84]],\n  [1, [68, 2, 85]],\n  [2, [69, 4, 87]],\n  [3, [69, 5, 88]],\n  [4, [70, 7, 90]],\n  [5, [70, 8, 91]],\n  [6, [70, 10, 92]],\n  [7, [70, 11, 94]],\n  [8, [71, 13, 95]],\n  [9, [71, 14, 96]],\n  [10, [71, 16, 97]],\n  [11, [71, 17, 99]],\n  [12, [71, 19, 100]],\n  [13, [72, 20, 101]],\n  [14, [72, 22, 102]],\n  [15, [72, 23, 103]],\n  [16, [72, 24, 104]],\n  [17, [72, 26, 105]],\n  [18, [72, 27, 106]],\n  [19, [72, 28, 107]],\n  [20, [72, 29, 108]],\n  [21, [72, 31, 109]],\n  [22, [72, 32, 110]],\n  [23, [72, 33, 111]],\n  [24, [72, 34, 111]],\n  [25, [71, 36, 112]],\n  [26, [71, 37, 113]],\n  [27, [71, 38, 114]],\n  [28, [71, 39, 114]],\n  [29, [71, 40, 115]],\n  [30, [71, 42, 116]],\n  [31, [70, 43, 116]],\n  [32, [70, 44, 117]],\n  [33, [70, 45, 118]],\n  [34, [70, 46, 118]],\n  [35, [69, 47, 119]],\n  [36, [69, 48, 119]],\n  [37, [69, 50, 120]],\n  [38, [68, 51, 120]],\n  [39, [68, 52, 121]],\n  [40, [68, 53, 121]],\n  [41, [67, 54, 122]],\n  [42, [67, 55, 122]],\n  [43, [66, 56, 123]],\n  [44, [66, 58, 123]],\n  [45, [65, 59, 124]],\n  [46, [65, 60, 124]],\n  [47, [64, 61, 124]],\n  [48, [64, 62, 125]],\n  [49, [63, 63, 125]],\n  [50, [62, 64, 125]],\n  [51, [62, 65, 125]],\n  [52, [61, 66, 126]],\n  [53, [61, 67, 126]],\n  [54, [60, 68, 126]],\n  [55, [59, 69, 126]],\n  [56, [59, 70, 126]],\n  [57, [58, 71, 126]],\n  [58, [57, 72, 126]],\n  [59, [57, 73, 126]],\n  [60, [56, 74, 126]],\n  [61, [55, 75, 126]],\n  [62, [55, 76, 126]],\n  [63, [54, 77, 126]],\n  [64, [53, 78, 126]],\n  [65, [52, 79, 126]],\n  [66, [52, 80, 126]],\n  [67, [51, 81, 126]],\n  [68, [50, 82, 126]],\n  [69, [49, 83, 126]],\n  [70, [49, 84, 126]],\n  [71, [48, 85, 126]],\n  [72, [47, 86, 126]],\n  [73, [46, 87, 126]],\n  [74, [46, 88, 126]],\n  [75, [45, 89, 126]],\n  [76, [44, 90, 126]],\n  [77, [43, 91, 126]],\n  [78, [42, 92, 126]],\n  [79, [42, 93, 126]],\n  [80, [41, 94, 126]],\n  [81, [40, 95, 125]],\n  [82, [39, 96, 125]],\n  [83, [39, 97, 125]],\n  [84, [38, 98, 125]],\n  [85, [37, 99, 125]],\n  [86, [36, 100, 124]],\n  [87, [36, 101, 124]],\n  [88, [35, 102, 124]],\n  [89, [34, 103, 123]],\n  [90, [33, 104, 123]],\n  [91, [33, 105, 123]],\n  [92, [32, 106, 122]],\n  [93, [31, 107, 122]],\n  [94, [30, 108, 121]],\n  [95, [30, 109, 121]],\n  [96, [29, 110, 120]],\n  [97, [28, 111, 120]],\n  [98, [27, 112, 119]],\n  [99, [27, 113, 119]],\n  [100, [26, 114, 118]],\n];\nconst visualizer = new ColorRampVisualizer(ColorBar);\n",
                "legend": {
                    "type": "continuous",
                    "title": "Bare_Cover_Fraction",
                    "gradients": [
                        {
                            "color": "rgb(26.67%,0.39%,32.94%)",
                            "label": 0,
                            "position": 0
                        },
                        {
                            "color": "rgb(10.2%,44.71%,46.27%)",
                            "label": 100,
                            "position": 100
                        }
                    ],
                    "maxPosition": 100,
                    "minPosition": 0
                }
            }
        ],
        "orderHint": 0,
        "instanceId": "175a80-YOUR-INSTANCEID-HERE",
        "lastUpdated": "2025-05-15T11:37:45.222373Z",
        "collectionType": "CUSTOM",
        "datasetSourceId": 10,
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "collectionId": "35fecf-YOUR-INSTANCEID-HERE",
            "type": "CUSTOM"
        }
    },
    {
        "id": "BuiltUp_Cover_Fraction",
        "title": "Fractional Cover: Urban / Built-up",
        "description": "Percentage of 100m pixel that is covered by urban or built-up areas",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nconst factor = 1;\nconst offset = 0;\n\nfunction setup() {\n  return {\n    input: [\"BuiltUp_Cover_Fraction\", \"dataMask\"],\n    output: [\n      { id: \"default\", bands: 4, sampleType: \"UINT8\" },\n      { id: \"index\", bands: 1, sampleType: \"FLOAT32\" },\n      { id: \"eobrowserStats\", bands: 2, sampleType: \"FLOAT32\" },\n      { id: \"dataMask\", bands: 1 },\n    ],\n  };\n}\n\nfunction evaluatePixel(samples) {\n  var originalValue = samples.BuiltUp_Cover_Fraction;\n\n  let val = originalValue * factor + offset;\n\n  let dataMask = samples.dataMask;\n\n  const indexVal = dataMask === 1 ? val : NaN;\n  const imgVals = visualizer.process(originalValue);\n\n  return {\n    default: imgVals.concat(dataMask * 255),\n    index: [indexVal],\n    eobrowserStats: [val, dataMask],\n    dataMask: [dataMask],\n  };\n}\n\n// EDIT COLOR BAR\nconst ColorBar = [\n  [0, [68, 1, 84]],\n  [1, [68, 2, 85]],\n  [2, [69, 4, 87]],\n  [3, [69, 5, 88]],\n  [4, [70, 7, 90]],\n  [5, [70, 8, 91]],\n  [6, [70, 10, 92]],\n  [7, [70, 11, 94]],\n  [8, [71, 13, 95]],\n  [9, [71, 14, 96]],\n  [10, [71, 16, 97]],\n  [11, [71, 17, 99]],\n  [12, [71, 19, 100]],\n  [13, [72, 20, 101]],\n  [14, [72, 22, 102]],\n  [15, [72, 23, 103]],\n  [16, [72, 24, 104]],\n  [17, [72, 26, 105]],\n  [18, [72, 27, 106]],\n  [19, [72, 28, 107]],\n  [20, [72, 29, 108]],\n  [21, [72, 31, 109]],\n  [22, [72, 32, 110]],\n  [23, [72, 33, 111]],\n  [24, [72, 34, 111]],\n  [25, [71, 36, 112]],\n  [26, [71, 37, 113]],\n  [27, [71, 38, 114]],\n  [28, [71, 39, 114]],\n  [29, [71, 40, 115]],\n  [30, [71, 42, 116]],\n  [31, [70, 43, 116]],\n  [32, [70, 44, 117]],\n  [33, [70, 45, 118]],\n  [34, [70, 46, 118]],\n  [35, [69, 47, 119]],\n  [36, [69, 48, 119]],\n  [37, [69, 50, 120]],\n  [38, [68, 51, 120]],\n  [39, [68, 52, 121]],\n  [40, [68, 53, 121]],\n  [41, [67, 54, 122]],\n  [42, [67, 55, 122]],\n  [43, [66, 56, 123]],\n  [44, [66, 58, 123]],\n  [45, [65, 59, 124]],\n  [46, [65, 60, 124]],\n  [47, [64, 61, 124]],\n  [48, [64, 62, 125]],\n  [49, [63, 63, 125]],\n  [50, [62, 64, 125]],\n  [51, [62, 65, 125]],\n  [52, [61, 66, 126]],\n  [53, [61, 67, 126]],\n  [54, [60, 68, 126]],\n  [55, [59, 69, 126]],\n  [56, [59, 70, 126]],\n  [57, [58, 71, 126]],\n  [58, [57, 72, 126]],\n  [59, [57, 73, 126]],\n  [60, [56, 74, 126]],\n  [61, [55, 75, 126]],\n  [62, [55, 76, 126]],\n  [63, [54, 77, 126]],\n  [64, [53, 78, 126]],\n  [65, [52, 79, 126]],\n  [66, [52, 80, 126]],\n  [67, [51, 81, 126]],\n  [68, [50, 82, 126]],\n  [69, [49, 83, 126]],\n  [70, [49, 84, 126]],\n  [71, [48, 85, 126]],\n  [72, [47, 86, 126]],\n  [73, [46, 87, 126]],\n  [74, [46, 88, 126]],\n  [75, [45, 89, 126]],\n  [76, [44, 90, 126]],\n  [77, [43, 91, 126]],\n  [78, [42, 92, 126]],\n  [79, [42, 93, 126]],\n  [80, [41, 94, 126]],\n  [81, [40, 95, 125]],\n  [82, [39, 96, 125]],\n  [83, [39, 97, 125]],\n  [84, [38, 98, 125]],\n  [85, [37, 99, 125]],\n  [86, [36, 100, 124]],\n  [87, [36, 101, 124]],\n  [88, [35, 102, 124]],\n  [89, [34, 103, 123]],\n  [90, [33, 104, 123]],\n  [91, [33, 105, 123]],\n  [92, [32, 106, 122]],\n  [93, [31, 107, 122]],\n  [94, [30, 108, 121]],\n  [95, [30, 109, 121]],\n  [96, [29, 110, 120]],\n  [97, [28, 111, 120]],\n  [98, [27, 112, 119]],\n  [99, [27, 113, 119]],\n  [100, [26, 114, 118]],\n];\nconst visualizer = new ColorRampVisualizer(ColorBar);\n",
                "legend": {
                    "type": "continuous",
                    "title": "BuiltUp_Cover_Fraction",
                    "gradients": [
                        {
                            "color": "rgb(26.67%,0.39%,32.94%)",
                            "label": 0,
                            "position": 0
                        },
                        {
                            "color": "rgb(10.2%,44.71%,46.27%)",
                            "label": 100,
                            "position": 100
                        }
                    ],
                    "maxPosition": 100,
                    "minPosition": 0
                }
            }
        ],
        "orderHint": 0,
        "instanceId": "175a80-YOUR-INSTANCEID-HERE",
        "lastUpdated": "2025-05-15T11:42:22.007711Z",
        "collectionType": "CUSTOM",
        "datasetSourceId": 10,
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "collectionId": "35fecf-YOUR-INSTANCEID-HERE",
            "type": "CUSTOM"
        }
    },
    {
        "id": "Change_Confidence",
        "title": "Change Confidence Indicator",
        "description": "Reliability of the change in the discrete class and hence implicitly also in the fractional covers",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nconst factor = 1;\nconst offset = 0;\n\nfunction setup() {\n  return {\n    input: [\"Change_Confidence\", \"dataMask\"],\n    output: [\n      { id: \"default\", bands: 4, sampleType: \"UINT8\" },\n      { id: \"index\", bands: 1, sampleType: \"FLOAT32\" },\n      { id: \"eobrowserStats\", bands: 2, sampleType: \"FLOAT32\" },\n      { id: \"dataMask\", bands: 1 },\n    ],\n  };\n}\n\nfunction evaluatePixel(samples) {\n  var originalValue = samples.Change_Confidence;\n\n  let val = originalValue * factor + offset;\n\n  let dataMask = samples.dataMask;\n\n  const indexVal = dataMask === 1 ? val : NaN;\n  const imgVals = getColor(originalValue);\n\n  return {\n    default: imgVals.concat(dataMask * 255),\n    index: [indexVal],\n    eobrowserStats: [val, dataMask],\n    dataMask: [dataMask],\n  };\n}\n\n// LOOKUP TABLE FOR COLOURS, TO BE ADAPTED\nconst exactColorMap = [\n  [0, [222, 222, 222]],\n  [1, [115, 133, 114]],\n  [2, [139, 171, 138]],\n  [3, [159, 255, 156]],\n];\n\n// Function to fetch color for a given value\nfunction getColor(value) {\n  const entry = exactColorMap.find(([v, _]) => v === Math.floor(value));\n  if (entry) {\n    const [_, color] = entry;\n    return [color[0], color[1], color[2]];\n  } else {\n    return [0, 0, 0];\n  }\n}\n",
                "legend": {
                    "type": "discrete",
                    "items": [
                        {
                            "color": "rgb(87.06%,87.06%,87.06%)",
                            "label": "0"
                        },
                        {
                            "color": "rgb(45.1%,52.16%,44.71%)",
                            "label": "1"
                        },
                        {
                            "color": "rgb(54.51%,67.06%,54.12%)",
                            "label": "2"
                        },
                        {
                            "color": "rgb(62.35%,100.0%,61.18%)",
                            "label": "3"
                        }
                    ]
                }
            }
        ],
        "orderHint": 0,
        "instanceId": "175a80-YOUR-INSTANCEID-HERE",
        "lastUpdated": "2025-05-06T15:28:56.814123Z",
        "collectionType": "CUSTOM",
        "datasetSourceId": 10,
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "collectionId": "35fecf-YOUR-INSTANCEID-HERE",
            "type": "CUSTOM"
        }
    },
    {
        "id": "Crops_Cover_Fraction",
        "title": "Fractional Cover: Crops",
        "description": "Percentage of 100m pixel that is covered by crops",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nconst factor = 1;\nconst offset = 0;\n\nfunction setup() {\n  return {\n    input: [\"Crops_Cover_Fraction\", \"dataMask\"],\n    output: [\n      { id: \"default\", bands: 4, sampleType: \"UINT8\" },\n      { id: \"index\", bands: 1, sampleType: \"FLOAT32\" },\n      { id: \"eobrowserStats\", bands: 2, sampleType: \"FLOAT32\" },\n      { id: \"dataMask\", bands: 1 },\n    ],\n  };\n}\n\nfunction evaluatePixel(samples) {\n  var originalValue = samples.Crops_Cover_Fraction;\n\n  let val = originalValue * factor + offset;\n\n  let dataMask = samples.dataMask;\n\n  const indexVal = dataMask === 1 ? val : NaN;\n  const imgVals = visualizer.process(originalValue);\n\n  return {\n    default: imgVals.concat(dataMask * 255),\n    index: [indexVal],\n    eobrowserStats: [val, dataMask],\n    dataMask: [dataMask],\n  };\n}\n\n// EDIT COLOR BAR\nconst ColorBar = [\n  [0, [68, 1, 84]],\n  [1, [68, 2, 85]],\n  [2, [69, 4, 87]],\n  [3, [69, 5, 88]],\n  [4, [70, 7, 90]],\n  [5, [70, 8, 91]],\n  [6, [70, 10, 92]],\n  [7, [70, 11, 94]],\n  [8, [71, 13, 95]],\n  [9, [71, 14, 96]],\n  [10, [71, 16, 97]],\n  [11, [71, 17, 99]],\n  [12, [71, 19, 100]],\n  [13, [72, 20, 101]],\n  [14, [72, 22, 102]],\n  [15, [72, 23, 103]],\n  [16, [72, 24, 104]],\n  [17, [72, 26, 105]],\n  [18, [72, 27, 106]],\n  [19, [72, 28, 107]],\n  [20, [72, 29, 108]],\n  [21, [72, 31, 109]],\n  [22, [72, 32, 110]],\n  [23, [72, 33, 111]],\n  [24, [72, 34, 111]],\n  [25, [71, 36, 112]],\n  [26, [71, 37, 113]],\n  [27, [71, 38, 114]],\n  [28, [71, 39, 114]],\n  [29, [71, 40, 115]],\n  [30, [71, 42, 116]],\n  [31, [70, 43, 116]],\n  [32, [70, 44, 117]],\n  [33, [70, 45, 118]],\n  [34, [70, 46, 118]],\n  [35, [69, 47, 119]],\n  [36, [69, 48, 119]],\n  [37, [69, 50, 120]],\n  [38, [68, 51, 120]],\n  [39, [68, 52, 121]],\n  [40, [68, 53, 121]],\n  [41, [67, 54, 122]],\n  [42, [67, 55, 122]],\n  [43, [66, 56, 123]],\n  [44, [66, 58, 123]],\n  [45, [65, 59, 124]],\n  [46, [65, 60, 124]],\n  [47, [64, 61, 124]],\n  [48, [64, 62, 125]],\n  [49, [63, 63, 125]],\n  [50, [62, 64, 125]],\n  [51, [62, 65, 125]],\n  [52, [61, 66, 126]],\n  [53, [61, 67, 126]],\n  [54, [60, 68, 126]],\n  [55, [59, 69, 126]],\n  [56, [59, 70, 126]],\n  [57, [58, 71, 126]],\n  [58, [57, 72, 126]],\n  [59, [57, 73, 126]],\n  [60, [56, 74, 126]],\n  [61, [55, 75, 126]],\n  [62, [55, 76, 126]],\n  [63, [54, 77, 126]],\n  [64, [53, 78, 126]],\n  [65, [52, 79, 126]],\n  [66, [52, 80, 126]],\n  [67, [51, 81, 126]],\n  [68, [50, 82, 126]],\n  [69, [49, 83, 126]],\n  [70, [49, 84, 126]],\n  [71, [48, 85, 126]],\n  [72, [47, 86, 126]],\n  [73, [46, 87, 126]],\n  [74, [46, 88, 126]],\n  [75, [45, 89, 126]],\n  [76, [44, 90, 126]],\n  [77, [43, 91, 126]],\n  [78, [42, 92, 126]],\n  [79, [42, 93, 126]],\n  [80, [41, 94, 126]],\n  [81, [40, 95, 125]],\n  [82, [39, 96, 125]],\n  [83, [39, 97, 125]],\n  [84, [38, 98, 125]],\n  [85, [37, 99, 125]],\n  [86, [36, 100, 124]],\n  [87, [36, 101, 124]],\n  [88, [35, 102, 124]],\n  [89, [34, 103, 123]],\n  [90, [33, 104, 123]],\n  [91, [33, 105, 123]],\n  [92, [32, 106, 122]],\n  [93, [31, 107, 122]],\n  [94, [30, 108, 121]],\n  [95, [30, 109, 121]],\n  [96, [29, 110, 120]],\n  [97, [28, 111, 120]],\n  [98, [27, 112, 119]],\n  [99, [27, 113, 119]],\n  [100, [26, 114, 118]],\n];\nconst visualizer = new ColorRampVisualizer(ColorBar);\n",
                "legend": {
                    "type": "continuous",
                    "title": "Crops_Cover_Fraction",
                    "gradients": [
                        {
                            "color": "rgb(26.67%,0.39%,32.94%)",
                            "label": 0,
                            "position": 0
                        },
                        {
                            "color": "rgb(10.2%,44.71%,46.27%)",
                            "label": 100,
                            "position": 100
                        }
                    ],
                    "maxPosition": 100,
                    "minPosition": 0
                }
            }
        ],
        "orderHint": 0,
        "instanceId": "175a80-YOUR-INSTANCEID-HERE",
        "lastUpdated": "2025-05-15T11:38:03.128991Z",
        "collectionType": "CUSTOM",
        "datasetSourceId": 10,
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "collectionId": "35fecf-YOUR-INSTANCEID-HERE",
            "type": "CUSTOM"
        }
    },
    {
        "id": "Data_Density_Indicator",
        "title": "Data Density Indicator",
        "description": "Availability of input PROBA-V UTM data at 100m and 300m resolutions",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nconst factor = 1;\nconst offset = 0;\n\nfunction setup() {\n  return {\n    input: [\"Data_Density_Indicator\", \"dataMask\"],\n    output: [\n      { id: \"default\", bands: 4, sampleType: \"UINT8\" },\n      { id: \"index\", bands: 1, sampleType: \"FLOAT32\" },\n      { id: \"eobrowserStats\", bands: 2, sampleType: \"FLOAT32\" },\n      { id: \"dataMask\", bands: 1 },\n    ],\n  };\n}\n\nfunction evaluatePixel(samples) {\n  var originalValue = samples.Data_Density_Indicator;\n\n  let val = originalValue * factor + offset;\n\n  let dataMask = samples.dataMask;\n\n  const indexVal = dataMask === 1 ? val : NaN;\n  const imgVals = visualizer.process(originalValue);\n\n  return {\n    default: imgVals.concat(dataMask * 255),\n    index: [indexVal],\n    eobrowserStats: [val, dataMask],\n    dataMask: [dataMask],\n  };\n}\n\n// EDIT COLOR BAR\nconst ColorBar = [\n  [0, [68, 1, 84]],\n  [1, [68, 2, 85]],\n  [2, [69, 4, 87]],\n  [3, [69, 5, 88]],\n  [4, [70, 7, 90]],\n  [5, [70, 8, 91]],\n  [6, [70, 10, 92]],\n  [7, [70, 11, 94]],\n  [8, [71, 13, 95]],\n  [9, [71, 14, 96]],\n  [10, [71, 16, 97]],\n  [11, [71, 17, 99]],\n  [12, [71, 19, 100]],\n  [13, [72, 20, 101]],\n  [14, [72, 22, 102]],\n  [15, [72, 23, 103]],\n  [16, [72, 24, 104]],\n  [17, [72, 26, 105]],\n  [18, [72, 27, 106]],\n  [19, [72, 28, 107]],\n  [20, [72, 29, 108]],\n  [21, [72, 31, 109]],\n  [22, [72, 32, 110]],\n  [23, [72, 33, 111]],\n  [24, [72, 34, 111]],\n  [25, [71, 36, 112]],\n  [26, [71, 37, 113]],\n  [27, [71, 38, 114]],\n  [28, [71, 39, 114]],\n  [29, [71, 40, 115]],\n  [30, [71, 42, 116]],\n  [31, [70, 43, 116]],\n  [32, [70, 44, 117]],\n  [33, [70, 45, 118]],\n  [34, [70, 46, 118]],\n  [35, [69, 47, 119]],\n  [36, [69, 48, 119]],\n  [37, [69, 50, 120]],\n  [38, [68, 51, 120]],\n  [39, [68, 52, 121]],\n  [40, [68, 53, 121]],\n  [41, [67, 54, 122]],\n  [42, [67, 55, 122]],\n  [43, [66, 56, 123]],\n  [44, [66, 58, 123]],\n  [45, [65, 59, 124]],\n  [46, [65, 60, 124]],\n  [47, [64, 61, 124]],\n  [48, [64, 62, 125]],\n  [49, [63, 63, 125]],\n  [50, [62, 64, 125]],\n  [51, [62, 65, 125]],\n  [52, [61, 66, 126]],\n  [53, [61, 67, 126]],\n  [54, [60, 68, 126]],\n  [55, [59, 69, 126]],\n  [56, [59, 70, 126]],\n  [57, [58, 71, 126]],\n  [58, [57, 72, 126]],\n  [59, [57, 73, 126]],\n  [60, [56, 74, 126]],\n  [61, [55, 75, 126]],\n  [62, [55, 76, 126]],\n  [63, [54, 77, 126]],\n  [64, [53, 78, 126]],\n  [65, [52, 79, 126]],\n  [66, [52, 80, 126]],\n  [67, [51, 81, 126]],\n  [68, [50, 82, 126]],\n  [69, [49, 83, 126]],\n  [70, [49, 84, 126]],\n  [71, [48, 85, 126]],\n  [72, [47, 86, 126]],\n  [73, [46, 87, 126]],\n  [74, [46, 88, 126]],\n  [75, [45, 89, 126]],\n  [76, [44, 90, 126]],\n  [77, [43, 91, 126]],\n  [78, [42, 92, 126]],\n  [79, [42, 93, 126]],\n  [80, [41, 94, 126]],\n  [81, [40, 95, 125]],\n  [82, [39, 96, 125]],\n  [83, [39, 97, 125]],\n  [84, [38, 98, 125]],\n  [85, [37, 99, 125]],\n  [86, [36, 100, 124]],\n  [87, [36, 101, 124]],\n  [88, [35, 102, 124]],\n  [89, [34, 103, 123]],\n  [90, [33, 104, 123]],\n  [91, [33, 105, 123]],\n  [92, [32, 106, 122]],\n  [93, [31, 107, 122]],\n  [94, [30, 108, 121]],\n  [95, [30, 109, 121]],\n  [96, [29, 110, 120]],\n  [97, [28, 111, 120]],\n  [98, [27, 112, 119]],\n  [99, [27, 113, 119]],\n  [100, [26, 114, 118]],\n];\nconst visualizer = new ColorRampVisualizer(ColorBar);\n",
                "legend": {
                    "type": "continuous",
                    "title": "Data_Density_Indicator",
                    "gradients": [
                        {
                            "color": "rgb(26.67%,0.39%,32.94%)",
                            "label": 0,
                            "position": 0
                        },
                        {
                            "color": "rgb(10.2%,44.71%,46.27%)",
                            "label": 100,
                            "position": 100
                        }
                    ],
                    "maxPosition": 100,
                    "minPosition": 0
                }
            }
        ],
        "orderHint": 0,
        "instanceId": "175a80-YOUR-INSTANCEID-HERE",
        "lastUpdated": "2025-05-15T11:36:16.142100Z",
        "collectionType": "CUSTOM",
        "datasetSourceId": 10,
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "collectionId": "35fecf-YOUR-INSTANCEID-HERE",
            "type": "CUSTOM"
        }
    },
    {
        "id": "Discrete_Classification",
        "title": "Discrete classification",
        "description": "Main discrete land cover classification, according to UN-FAO LCCS",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nconst factor = 1;\nconst offset = 0;\n\nfunction setup() {\n  return {\n    input: [\"Discrete_Classification\", \"dataMask\"],\n    output: [\n      { id: \"default\", bands: 4, sampleType: \"UINT8\" },\n      { id: \"index\", bands: 1, sampleType: \"FLOAT32\" },\n      { id: \"eobrowserStats\", bands: 2, sampleType: \"FLOAT32\" },\n      { id: \"dataMask\", bands: 1 },\n    ],\n  };\n}\n\nfunction evaluatePixel(samples) {\n  var originalValue = samples.Discrete_Classification;\n\n  let val = originalValue * factor + offset;\n\n  let dataMask = samples.dataMask;\n\n  const indexVal = dataMask === 1 ? val : NaN;\n  const imgVals = getColor(originalValue);\n\n  return {\n    default: imgVals.concat(dataMask * 255),\n    index: [indexVal],\n    eobrowserStats: [val, dataMask],\n    dataMask: [dataMask],\n  };\n}\n\n// LOOKUP TABLE FOR COLOURS, TO BE ADAPTED\nconst exactColorMap = [\n  [0, [40, 40, 40]],\n  [111, [88, 72, 31]],\n  [113, [112, 102, 62]],\n  [112, [0, 153, 0]],\n  [114, [0, 204, 0]],\n  [115, [78, 117, 31]],\n  [116, [0, 120, 0]],\n  [121, [102, 96, 0]],\n  [123, [141, 116, 0]],\n  [122, [141, 180, 0]],\n  [124, [160, 220, 0]],\n  [125, [146, 153, 0]],\n  [126, [100, 140, 0]],\n  [20, [255, 187, 34]],\n  [30, [255, 255, 76]],\n  [90, [0, 150, 160]],\n  [100, [250, 230, 160]],\n  [60, [180, 180, 180]],\n  [40, [240, 150, 255]],\n  [50, [250, 0, 0]],\n  [70, [240, 240, 240]],\n  [80, [0, 50, 200]],\n  [200, [0, 0, 128]],\n];\n\n// Function to fetch color for a given value\nfunction getColor(value) {\n  const entry = exactColorMap.find(([v, _]) => v === Math.floor(value));\n  if (entry) {\n    const [_, color] = entry;\n    return [color[0], color[1], color[2]];\n  } else {\n    return [0, 0, 0];\n  }\n}\n",
                "legend": {
                    "type": "discrete",
                    "items": [
                        {
                            "color": "rgb(15.69%,15.69%,15.69%)",
                            "label": "No input data available"
                        },
                        {
                            "color": "rgb(34.51%,28.24%,12.16%)",
                            "label": "Closed forest, evergreen needle leaf"
                        },
                        {
                            "color": "rgb(43.92%,40.0%,24.31%)",
                            "label": "Closed forest, deciduous needle leaf"
                        },
                        {
                            "color": "rgb(0.0%,60.0%,0.0%)",
                            "label": "Closed forest, evergreen, broad leaf"
                        },
                        {
                            "color": "rgb(0.0%,80.0%,0.0%)",
                            "label": "Closed forest, deciduous broad leaf"
                        },
                        {
                            "color": "rgb(30.59%,45.88%,12.16%)",
                            "label": "Closed forest, mixed"
                        },
                        {
                            "color": "rgb(0.0%,47.06%,0.0%)",
                            "label": "Closed forest, unknown"
                        },
                        {
                            "color": "rgb(40.0%,37.65%,0.0%)",
                            "label": "Open forest, evergreen needle leaf"
                        },
                        {
                            "color": "rgb(55.29%,45.49%,0.0%)",
                            "label": "Open forest, deciduous needle leaf"
                        },
                        {
                            "color": "rgb(55.29%,70.59%,0.0%)",
                            "label": "Open forest, evergreen broad leaf"
                        },
                        {
                            "color": "rgb(62.75%,86.27%,0.0%)",
                            "label": "Open forest, deciduous broad leaf"
                        },
                        {
                            "color": "rgb(57.25%,60.0%,0.0%)",
                            "label": "Open forest, mixed"
                        },
                        {
                            "color": "rgb(39.22%,54.9%,0.0%)",
                            "label": "Open forest, unknown"
                        },
                        {
                            "color": "rgb(100.0%,73.33%,13.33%)",
                            "label": "Shrubs"
                        },
                        {
                            "color": "rgb(100.0%,100.0%,29.8%)",
                            "label": "Herbaceous vegetation"
                        },
                        {
                            "color": "rgb(0.0%,58.82%,62.75%)",
                            "label": "Herbaceous wetland"
                        },
                        {
                            "color": "rgb(98.04%,90.2%,62.75%)",
                            "label": "Moss and lichen"
                        },
                        {
                            "color": "rgb(70.59%,70.59%,70.59%)",
                            "label": "Bare / sparse vegetation"
                        },
                        {
                            "color": "rgb(94.12%,58.82%,100.0%)",
                            "label": "Cultivated and managed vegetation/agriculture (cropland)"
                        },
                        {
                            "color": "rgb(98.04%,0.0%,0.0%)",
                            "label": "Urban / built up"
                        },
                        {
                            "color": "rgb(94.12%,94.12%,94.12%)",
                            "label": "Snow and Ice"
                        },
                        {
                            "color": "rgb(0.0%,19.61%,78.43%)",
                            "label": "Permanent water bodies"
                        },
                        {
                            "color": "rgb(0.0%,0.0%,50.2%)",
                            "label": "Open sea"
                        }
                    ]
                }
            }
        ],
        "orderHint": 0,
        "instanceId": "175a80-YOUR-INSTANCEID-HERE",
        "lastUpdated": "2025-05-15T11:36:49.190796Z",
        "collectionType": "CUSTOM",
        "datasetSourceId": 10,
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "collectionId": "35fecf-YOUR-INSTANCEID-HERE",
            "type": "CUSTOM"
        }
    },
    {
        "id": "Discrete_Classification_Probability",
        "title": "Discrete classification probability",
        "description": "Probability (quality indicator) of the discrete classification",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nconst factor = 1;\nconst offset = 0;\n\nfunction setup() {\n  return {\n    input: [\"Discrete_Classification_Probability\", \"dataMask\"],\n    output: [\n      { id: \"default\", bands: 4, sampleType: \"UINT8\" },\n      { id: \"index\", bands: 1, sampleType: \"FLOAT32\" },\n      { id: \"eobrowserStats\", bands: 2, sampleType: \"FLOAT32\" },\n      { id: \"dataMask\", bands: 1 },\n    ],\n  };\n}\n\nfunction evaluatePixel(samples) {\n  var originalValue = samples.Discrete_Classification_Probability;\n\n  let val = originalValue * factor + offset;\n\n  let dataMask = samples.dataMask;\n\n  const indexVal = dataMask === 1 ? val : NaN;\n  const imgVals = visualizer.process(originalValue);\n\n  return {\n    default: imgVals.concat(dataMask * 255),\n    index: [indexVal],\n    eobrowserStats: [val, dataMask],\n    dataMask: [dataMask],\n  };\n}\n\n// EDIT COLOR BAR\nconst ColorBar = [\n  [0, [68, 1, 84]],\n  [1, [68, 2, 85]],\n  [2, [69, 4, 87]],\n  [3, [69, 5, 88]],\n  [4, [70, 7, 90]],\n  [5, [70, 8, 91]],\n  [6, [70, 10, 92]],\n  [7, [70, 11, 94]],\n  [8, [71, 13, 95]],\n  [9, [71, 14, 96]],\n  [10, [71, 16, 97]],\n  [11, [71, 17, 99]],\n  [12, [71, 19, 100]],\n  [13, [72, 20, 101]],\n  [14, [72, 22, 102]],\n  [15, [72, 23, 103]],\n  [16, [72, 24, 104]],\n  [17, [72, 26, 105]],\n  [18, [72, 27, 106]],\n  [19, [72, 28, 107]],\n  [20, [72, 29, 108]],\n  [21, [72, 31, 109]],\n  [22, [72, 32, 110]],\n  [23, [72, 33, 111]],\n  [24, [72, 34, 111]],\n  [25, [71, 36, 112]],\n  [26, [71, 37, 113]],\n  [27, [71, 38, 114]],\n  [28, [71, 39, 114]],\n  [29, [71, 40, 115]],\n  [30, [71, 42, 116]],\n  [31, [70, 43, 116]],\n  [32, [70, 44, 117]],\n  [33, [70, 45, 118]],\n  [34, [70, 46, 118]],\n  [35, [69, 47, 119]],\n  [36, [69, 48, 119]],\n  [37, [69, 50, 120]],\n  [38, [68, 51, 120]],\n  [39, [68, 52, 121]],\n  [40, [68, 53, 121]],\n  [41, [67, 54, 122]],\n  [42, [67, 55, 122]],\n  [43, [66, 56, 123]],\n  [44, [66, 58, 123]],\n  [45, [65, 59, 124]],\n  [46, [65, 60, 124]],\n  [47, [64, 61, 124]],\n  [48, [64, 62, 125]],\n  [49, [63, 63, 125]],\n  [50, [62, 64, 125]],\n  [51, [62, 65, 125]],\n  [52, [61, 66, 126]],\n  [53, [61, 67, 126]],\n  [54, [60, 68, 126]],\n  [55, [59, 69, 126]],\n  [56, [59, 70, 126]],\n  [57, [58, 71, 126]],\n  [58, [57, 72, 126]],\n  [59, [57, 73, 126]],\n  [60, [56, 74, 126]],\n  [61, [55, 75, 126]],\n  [62, [55, 76, 126]],\n  [63, [54, 77, 126]],\n  [64, [53, 78, 126]],\n  [65, [52, 79, 126]],\n  [66, [52, 80, 126]],\n  [67, [51, 81, 126]],\n  [68, [50, 82, 126]],\n  [69, [49, 83, 126]],\n  [70, [49, 84, 126]],\n  [71, [48, 85, 126]],\n  [72, [47, 86, 126]],\n  [73, [46, 87, 126]],\n  [74, [46, 88, 126]],\n  [75, [45, 89, 126]],\n  [76, [44, 90, 126]],\n  [77, [43, 91, 126]],\n  [78, [42, 92, 126]],\n  [79, [42, 93, 126]],\n  [80, [41, 94, 126]],\n  [81, [40, 95, 125]],\n  [82, [39, 96, 125]],\n  [83, [39, 97, 125]],\n  [84, [38, 98, 125]],\n  [85, [37, 99, 125]],\n  [86, [36, 100, 124]],\n  [87, [36, 101, 124]],\n  [88, [35, 102, 124]],\n  [89, [34, 103, 123]],\n  [90, [33, 104, 123]],\n  [91, [33, 105, 123]],\n  [92, [32, 106, 122]],\n  [93, [31, 107, 122]],\n  [94, [30, 108, 121]],\n  [95, [30, 109, 121]],\n  [96, [29, 110, 120]],\n  [97, [28, 111, 120]],\n  [98, [27, 112, 119]],\n  [99, [27, 113, 119]],\n  [100, [26, 114, 118]],\n];\nconst visualizer = new ColorRampVisualizer(ColorBar);\n",
                "legend": {
                    "type": "continuous",
                    "title": "Discrete_Classification_Probability",
                    "gradients": [
                        {
                            "color": "rgb(26.67%,0.39%,32.94%)",
                            "label": 0,
                            "position": 0
                        },
                        {
                            "color": "rgb(10.2%,44.71%,46.27%)",
                            "label": 100,
                            "position": 100
                        }
                    ],
                    "maxPosition": 100,
                    "minPosition": 0
                }
            }
        ],
        "orderHint": 0,
        "instanceId": "175a80-YOUR-INSTANCEID-HERE",
        "lastUpdated": "2025-05-15T11:37:06.637807Z",
        "collectionType": "CUSTOM",
        "datasetSourceId": 10,
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "collectionId": "35fecf-YOUR-INSTANCEID-HERE",
            "type": "CUSTOM"
        }
    },
    {
        "id": "Forest_Type",
        "title": "Forest type",
        "description": "Type of forest for all pixels where forest cover fraction exceeds 1%",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nconst factor = 1;\nconst offset = 0;\n\nfunction setup() {\n  return {\n    input: [\"Forest_Type\", \"dataMask\"],\n    output: [\n      { id: \"default\", bands: 4, sampleType: \"UINT8\" },\n      { id: \"index\", bands: 1, sampleType: \"FLOAT32\" },\n      { id: \"eobrowserStats\", bands: 2, sampleType: \"FLOAT32\" },\n      { id: \"dataMask\", bands: 1 },\n    ],\n  };\n}\n\nfunction evaluatePixel(samples) {\n  var originalValue = samples.Forest_Type;\n\n  let val = originalValue * factor + offset;\n\n  let dataMask = samples.dataMask;\n\n  const indexVal = dataMask === 1 ? val : NaN;\n  const imgVals = getColor(originalValue);\n\n  return {\n    default: imgVals.concat(dataMask * 255),\n    index: [indexVal],\n    eobrowserStats: [val, dataMask],\n    dataMask: [dataMask],\n  };\n}\n\n// LOOKUP TABLE FOR COLOURS, TO BE ADAPTED\nconst exactColorMap = [\n  [0, [40, 40, 40]],\n  [1, [102, 96, 0]],\n  [2, [0, 153, 0]],\n  [3, [112, 102, 62]],\n  [4, [160, 220, 0]],\n  [5, [146, 153, 0]],\n];\n\n// Function to fetch color for a given value\nfunction getColor(value) {\n  const entry = exactColorMap.find(([v, _]) => v === Math.floor(value));\n  if (entry) {\n    const [_, color] = entry;\n    return [color[0], color[1], color[2]];\n  } else {\n    return [0, 0, 0];\n  }\n}\n",
                "legend": {
                    "type": "discrete",
                    "items": [
                        {
                            "color": "rgb(15.69%,15.69%,15.69%)",
                            "label": "Unknown"
                        },
                        {
                            "color": "rgb(40.0%,37.65%,0.0%)",
                            "label": "Evergreen needle leaf forest"
                        },
                        {
                            "color": "rgb(0.0%,60.0%,0.0%)",
                            "label": "Evergreen broad leaf forest"
                        },
                        {
                            "color": "rgb(43.92%,40.0%,24.31%)",
                            "label": "Deciduous needle leaf"
                        },
                        {
                            "color": "rgb(62.75%,86.27%,0.0%)",
                            "label": "Deciduous broad leaf"
                        },
                        {
                            "color": "rgb(57.25%,60.0%,0.0%)",
                            "label": "Mix of forest types"
                        }
                    ]
                }
            }
        ],
        "orderHint": 0,
        "instanceId": "175a80-YOUR-INSTANCEID-HERE",
        "lastUpdated": "2025-05-15T11:37:25.622506Z",
        "collectionType": "CUSTOM",
        "datasetSourceId": 10,
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "collectionId": "35fecf-YOUR-INSTANCEID-HERE",
            "type": "CUSTOM"
        }
    },
    {
        "id": "Grass_Cover_Fraction",
        "title": "Fractional Cover: Grass",
        "description": "Percentage of 100m pixel that is covered by grass",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nconst factor = 1;\nconst offset = 0;\n\nfunction setup() {\n  return {\n    input: [\"Grass_Cover_Fraction\", \"dataMask\"],\n    output: [\n      { id: \"default\", bands: 4, sampleType: \"UINT8\" },\n      { id: \"index\", bands: 1, sampleType: \"FLOAT32\" },\n      { id: \"eobrowserStats\", bands: 2, sampleType: \"FLOAT32\" },\n      { id: \"dataMask\", bands: 1 },\n    ],\n  };\n}\n\nfunction evaluatePixel(samples) {\n  var originalValue = samples.Grass_Cover_Fraction;\n\n  let val = originalValue * factor + offset;\n\n  let dataMask = samples.dataMask;\n\n  const indexVal = dataMask === 1 ? val : NaN;\n  const imgVals = visualizer.process(originalValue);\n\n  return {\n    default: imgVals.concat(dataMask * 255),\n    index: [indexVal],\n    eobrowserStats: [val, dataMask],\n    dataMask: [dataMask],\n  };\n}\n\n// EDIT COLOR BAR\nconst ColorBar = [\n  [0, [68, 1, 84]],\n  [1, [68, 2, 85]],\n  [2, [69, 4, 87]],\n  [3, [69, 5, 88]],\n  [4, [70, 7, 90]],\n  [5, [70, 8, 91]],\n  [6, [70, 10, 92]],\n  [7, [70, 11, 94]],\n  [8, [71, 13, 95]],\n  [9, [71, 14, 96]],\n  [10, [71, 16, 97]],\n  [11, [71, 17, 99]],\n  [12, [71, 19, 100]],\n  [13, [72, 20, 101]],\n  [14, [72, 22, 102]],\n  [15, [72, 23, 103]],\n  [16, [72, 24, 104]],\n  [17, [72, 26, 105]],\n  [18, [72, 27, 106]],\n  [19, [72, 28, 107]],\n  [20, [72, 29, 108]],\n  [21, [72, 31, 109]],\n  [22, [72, 32, 110]],\n  [23, [72, 33, 111]],\n  [24, [72, 34, 111]],\n  [25, [71, 36, 112]],\n  [26, [71, 37, 113]],\n  [27, [71, 38, 114]],\n  [28, [71, 39, 114]],\n  [29, [71, 40, 115]],\n  [30, [71, 42, 116]],\n  [31, [70, 43, 116]],\n  [32, [70, 44, 117]],\n  [33, [70, 45, 118]],\n  [34, [70, 46, 118]],\n  [35, [69, 47, 119]],\n  [36, [69, 48, 119]],\n  [37, [69, 50, 120]],\n  [38, [68, 51, 120]],\n  [39, [68, 52, 121]],\n  [40, [68, 53, 121]],\n  [41, [67, 54, 122]],\n  [42, [67, 55, 122]],\n  [43, [66, 56, 123]],\n  [44, [66, 58, 123]],\n  [45, [65, 59, 124]],\n  [46, [65, 60, 124]],\n  [47, [64, 61, 124]],\n  [48, [64, 62, 125]],\n  [49, [63, 63, 125]],\n  [50, [62, 64, 125]],\n  [51, [62, 65, 125]],\n  [52, [61, 66, 126]],\n  [53, [61, 67, 126]],\n  [54, [60, 68, 126]],\n  [55, [59, 69, 126]],\n  [56, [59, 70, 126]],\n  [57, [58, 71, 126]],\n  [58, [57, 72, 126]],\n  [59, [57, 73, 126]],\n  [60, [56, 74, 126]],\n  [61, [55, 75, 126]],\n  [62, [55, 76, 126]],\n  [63, [54, 77, 126]],\n  [64, [53, 78, 126]],\n  [65, [52, 79, 126]],\n  [66, [52, 80, 126]],\n  [67, [51, 81, 126]],\n  [68, [50, 82, 126]],\n  [69, [49, 83, 126]],\n  [70, [49, 84, 126]],\n  [71, [48, 85, 126]],\n  [72, [47, 86, 126]],\n  [73, [46, 87, 126]],\n  [74, [46, 88, 126]],\n  [75, [45, 89, 126]],\n  [76, [44, 90, 126]],\n  [77, [43, 91, 126]],\n  [78, [42, 92, 126]],\n  [79, [42, 93, 126]],\n  [80, [41, 94, 126]],\n  [81, [40, 95, 125]],\n  [82, [39, 96, 125]],\n  [83, [39, 97, 125]],\n  [84, [38, 98, 125]],\n  [85, [37, 99, 125]],\n  [86, [36, 100, 124]],\n  [87, [36, 101, 124]],\n  [88, [35, 102, 124]],\n  [89, [34, 103, 123]],\n  [90, [33, 104, 123]],\n  [91, [33, 105, 123]],\n  [92, [32, 106, 122]],\n  [93, [31, 107, 122]],\n  [94, [30, 108, 121]],\n  [95, [30, 109, 121]],\n  [96, [29, 110, 120]],\n  [97, [28, 111, 120]],\n  [98, [27, 112, 119]],\n  [99, [27, 113, 119]],\n  [100, [26, 114, 118]],\n];\nconst visualizer = new ColorRampVisualizer(ColorBar);\n",
                "legend": {
                    "type": "continuous",
                    "title": "Grass_Cover_Fraction",
                    "gradients": [
                        {
                            "color": "rgb(26.67%,0.39%,32.94%)",
                            "label": 0,
                            "position": 0
                        },
                        {
                            "color": "rgb(10.2%,44.71%,46.27%)",
                            "label": 100,
                            "position": 100
                        }
                    ],
                    "maxPosition": 100,
                    "minPosition": 0
                }
            }
        ],
        "orderHint": 0,
        "instanceId": "175a80-YOUR-INSTANCEID-HERE",
        "lastUpdated": "2025-05-15T11:38:37.854099Z",
        "collectionType": "CUSTOM",
        "datasetSourceId": 10,
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "collectionId": "35fecf-YOUR-INSTANCEID-HERE",
            "type": "CUSTOM"
        }
    },
    {
        "id": "MossLichen_Cover_Fraction",
        "title": "Fractional Cover: Moss / Lichen",
        "description": "Percentage of 100m pixel that is covered by moss or lichen",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nconst factor = 1;\nconst offset = 0;\n\nfunction setup() {\n  return {\n    input: [\"MossLichen_Cover_Fraction\", \"dataMask\"],\n    output: [\n      { id: \"default\", bands: 4, sampleType: \"UINT8\" },\n      { id: \"index\", bands: 1, sampleType: \"FLOAT32\" },\n      { id: \"eobrowserStats\", bands: 2, sampleType: \"FLOAT32\" },\n      { id: \"dataMask\", bands: 1 },\n    ],\n  };\n}\n\nfunction evaluatePixel(samples) {\n  var originalValue = samples.MossLichen_Cover_Fraction;\n\n  let val = originalValue * factor + offset;\n\n  let dataMask = samples.dataMask;\n\n  const indexVal = dataMask === 1 ? val : NaN;\n  const imgVals = visualizer.process(originalValue);\n\n  return {\n    default: imgVals.concat(dataMask * 255),\n    index: [indexVal],\n    eobrowserStats: [val, dataMask],\n    dataMask: [dataMask],\n  };\n}\n\n// EDIT COLOR BAR\nconst ColorBar = [\n  [0, [68, 1, 84]],\n  [1, [68, 2, 85]],\n  [2, [69, 4, 87]],\n  [3, [69, 5, 88]],\n  [4, [70, 7, 90]],\n  [5, [70, 8, 91]],\n  [6, [70, 10, 92]],\n  [7, [70, 11, 94]],\n  [8, [71, 13, 95]],\n  [9, [71, 14, 96]],\n  [10, [71, 16, 97]],\n  [11, [71, 17, 99]],\n  [12, [71, 19, 100]],\n  [13, [72, 20, 101]],\n  [14, [72, 22, 102]],\n  [15, [72, 23, 103]],\n  [16, [72, 24, 104]],\n  [17, [72, 26, 105]],\n  [18, [72, 27, 106]],\n  [19, [72, 28, 107]],\n  [20, [72, 29, 108]],\n  [21, [72, 31, 109]],\n  [22, [72, 32, 110]],\n  [23, [72, 33, 111]],\n  [24, [72, 34, 111]],\n  [25, [71, 36, 112]],\n  [26, [71, 37, 113]],\n  [27, [71, 38, 114]],\n  [28, [71, 39, 114]],\n  [29, [71, 40, 115]],\n  [30, [71, 42, 116]],\n  [31, [70, 43, 116]],\n  [32, [70, 44, 117]],\n  [33, [70, 45, 118]],\n  [34, [70, 46, 118]],\n  [35, [69, 47, 119]],\n  [36, [69, 48, 119]],\n  [37, [69, 50, 120]],\n  [38, [68, 51, 120]],\n  [39, [68, 52, 121]],\n  [40, [68, 53, 121]],\n  [41, [67, 54, 122]],\n  [42, [67, 55, 122]],\n  [43, [66, 56, 123]],\n  [44, [66, 58, 123]],\n  [45, [65, 59, 124]],\n  [46, [65, 60, 124]],\n  [47, [64, 61, 124]],\n  [48, [64, 62, 125]],\n  [49, [63, 63, 125]],\n  [50, [62, 64, 125]],\n  [51, [62, 65, 125]],\n  [52, [61, 66, 126]],\n  [53, [61, 67, 126]],\n  [54, [60, 68, 126]],\n  [55, [59, 69, 126]],\n  [56, [59, 70, 126]],\n  [57, [58, 71, 126]],\n  [58, [57, 72, 126]],\n  [59, [57, 73, 126]],\n  [60, [56, 74, 126]],\n  [61, [55, 75, 126]],\n  [62, [55, 76, 126]],\n  [63, [54, 77, 126]],\n  [64, [53, 78, 126]],\n  [65, [52, 79, 126]],\n  [66, [52, 80, 126]],\n  [67, [51, 81, 126]],\n  [68, [50, 82, 126]],\n  [69, [49, 83, 126]],\n  [70, [49, 84, 126]],\n  [71, [48, 85, 126]],\n  [72, [47, 86, 126]],\n  [73, [46, 87, 126]],\n  [74, [46, 88, 126]],\n  [75, [45, 89, 126]],\n  [76, [44, 90, 126]],\n  [77, [43, 91, 126]],\n  [78, [42, 92, 126]],\n  [79, [42, 93, 126]],\n  [80, [41, 94, 126]],\n  [81, [40, 95, 125]],\n  [82, [39, 96, 125]],\n  [83, [39, 97, 125]],\n  [84, [38, 98, 125]],\n  [85, [37, 99, 125]],\n  [86, [36, 100, 124]],\n  [87, [36, 101, 124]],\n  [88, [35, 102, 124]],\n  [89, [34, 103, 123]],\n  [90, [33, 104, 123]],\n  [91, [33, 105, 123]],\n  [92, [32, 106, 122]],\n  [93, [31, 107, 122]],\n  [94, [30, 108, 121]],\n  [95, [30, 109, 121]],\n  [96, [29, 110, 120]],\n  [97, [28, 111, 120]],\n  [98, [27, 112, 119]],\n  [99, [27, 113, 119]],\n  [100, [26, 114, 118]],\n];\nconst visualizer = new ColorRampVisualizer(ColorBar);\n",
                "legend": {
                    "type": "continuous",
                    "title": "MossLichen_Cover_Fraction",
                    "gradients": [
                        {
                            "color": "rgb(26.67%,0.39%,32.94%)",
                            "label": 0,
                            "position": 0
                        },
                        {
                            "color": "rgb(10.2%,44.71%,46.27%)",
                            "label": 100,
                            "position": 100
                        }
                    ],
                    "maxPosition": 100,
                    "minPosition": 0
                }
            }
        ],
        "orderHint": 0,
        "instanceId": "175a80-YOUR-INSTANCEID-HERE",
        "lastUpdated": "2025-05-15T11:38:51.257190Z",
        "collectionType": "CUSTOM",
        "datasetSourceId": 10,
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "collectionId": "35fecf-YOUR-INSTANCEID-HERE",
            "type": "CUSTOM"
        }
    },
    {
        "id": "PermanentWater_Cover_Fraction",
        "title": "Fractional Cover: Permanent Water",
        "description": "Percentage of 100m pixel that is covered by permanent water",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nconst factor = 1;\nconst offset = 0;\n\nfunction setup() {\n  return {\n    input: [\"PermanentWater_Cover_Fraction\", \"dataMask\"],\n    output: [\n      { id: \"default\", bands: 4, sampleType: \"UINT8\" },\n      { id: \"index\", bands: 1, sampleType: \"FLOAT32\" },\n      { id: \"eobrowserStats\", bands: 2, sampleType: \"FLOAT32\" },\n      { id: \"dataMask\", bands: 1 },\n    ],\n  };\n}\n\nfunction evaluatePixel(samples) {\n  var originalValue = samples.PermanentWater_Cover_Fraction;\n\n  let val = originalValue * factor + offset;\n\n  let dataMask = samples.dataMask;\n\n  const indexVal = dataMask === 1 ? val : NaN;\n  const imgVals = visualizer.process(originalValue);\n\n  return {\n    default: imgVals.concat(dataMask * 255),\n    index: [indexVal],\n    eobrowserStats: [val, dataMask],\n    dataMask: [dataMask],\n  };\n}\n\n// EDIT COLOR BAR\nconst ColorBar = [\n  [0, [68, 1, 84]],\n  [1, [68, 2, 85]],\n  [2, [69, 4, 87]],\n  [3, [69, 5, 88]],\n  [4, [70, 7, 90]],\n  [5, [70, 8, 91]],\n  [6, [70, 10, 92]],\n  [7, [70, 11, 94]],\n  [8, [71, 13, 95]],\n  [9, [71, 14, 96]],\n  [10, [71, 16, 97]],\n  [11, [71, 17, 99]],\n  [12, [71, 19, 100]],\n  [13, [72, 20, 101]],\n  [14, [72, 22, 102]],\n  [15, [72, 23, 103]],\n  [16, [72, 24, 104]],\n  [17, [72, 26, 105]],\n  [18, [72, 27, 106]],\n  [19, [72, 28, 107]],\n  [20, [72, 29, 108]],\n  [21, [72, 31, 109]],\n  [22, [72, 32, 110]],\n  [23, [72, 33, 111]],\n  [24, [72, 34, 111]],\n  [25, [71, 36, 112]],\n  [26, [71, 37, 113]],\n  [27, [71, 38, 114]],\n  [28, [71, 39, 114]],\n  [29, [71, 40, 115]],\n  [30, [71, 42, 116]],\n  [31, [70, 43, 116]],\n  [32, [70, 44, 117]],\n  [33, [70, 45, 118]],\n  [34, [70, 46, 118]],\n  [35, [69, 47, 119]],\n  [36, [69, 48, 119]],\n  [37, [69, 50, 120]],\n  [38, [68, 51, 120]],\n  [39, [68, 52, 121]],\n  [40, [68, 53, 121]],\n  [41, [67, 54, 122]],\n  [42, [67, 55, 122]],\n  [43, [66, 56, 123]],\n  [44, [66, 58, 123]],\n  [45, [65, 59, 124]],\n  [46, [65, 60, 124]],\n  [47, [64, 61, 124]],\n  [48, [64, 62, 125]],\n  [49, [63, 63, 125]],\n  [50, [62, 64, 125]],\n  [51, [62, 65, 125]],\n  [52, [61, 66, 126]],\n  [53, [61, 67, 126]],\n  [54, [60, 68, 126]],\n  [55, [59, 69, 126]],\n  [56, [59, 70, 126]],\n  [57, [58, 71, 126]],\n  [58, [57, 72, 126]],\n  [59, [57, 73, 126]],\n  [60, [56, 74, 126]],\n  [61, [55, 75, 126]],\n  [62, [55, 76, 126]],\n  [63, [54, 77, 126]],\n  [64, [53, 78, 126]],\n  [65, [52, 79, 126]],\n  [66, [52, 80, 126]],\n  [67, [51, 81, 126]],\n  [68, [50, 82, 126]],\n  [69, [49, 83, 126]],\n  [70, [49, 84, 126]],\n  [71, [48, 85, 126]],\n  [72, [47, 86, 126]],\n  [73, [46, 87, 126]],\n  [74, [46, 88, 126]],\n  [75, [45, 89, 126]],\n  [76, [44, 90, 126]],\n  [77, [43, 91, 126]],\n  [78, [42, 92, 126]],\n  [79, [42, 93, 126]],\n  [80, [41, 94, 126]],\n  [81, [40, 95, 125]],\n  [82, [39, 96, 125]],\n  [83, [39, 97, 125]],\n  [84, [38, 98, 125]],\n  [85, [37, 99, 125]],\n  [86, [36, 100, 124]],\n  [87, [36, 101, 124]],\n  [88, [35, 102, 124]],\n  [89, [34, 103, 123]],\n  [90, [33, 104, 123]],\n  [91, [33, 105, 123]],\n  [92, [32, 106, 122]],\n  [93, [31, 107, 122]],\n  [94, [30, 108, 121]],\n  [95, [30, 109, 121]],\n  [96, [29, 110, 120]],\n  [97, [28, 111, 120]],\n  [98, [27, 112, 119]],\n  [99, [27, 113, 119]],\n  [100, [26, 114, 118]],\n];\nconst visualizer = new ColorRampVisualizer(ColorBar);\n",
                "legend": {
                    "type": "continuous",
                    "title": "PermanentWater_Cover_Fraction",
                    "gradients": [
                        {
                            "color": "rgb(26.67%,0.39%,32.94%)",
                            "label": 0,
                            "position": 0
                        },
                        {
                            "color": "rgb(10.2%,44.71%,46.27%)",
                            "label": 100,
                            "position": 100
                        }
                    ],
                    "maxPosition": 100,
                    "minPosition": 0
                }
            }
        ],
        "orderHint": 0,
        "instanceId": "175a80-YOUR-INSTANCEID-HERE",
        "lastUpdated": "2025-05-15T11:39:06.705303Z",
        "collectionType": "CUSTOM",
        "datasetSourceId": 10,
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "collectionId": "35fecf-YOUR-INSTANCEID-HERE",
            "type": "CUSTOM"
        }
    },
    {
        "id": "SeasonalWater_Cover_fraction",
        "title": "Fractional Cover: Seasonal Water",
        "description": "Percentage of 100m pixel that is covered by seasonal water",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nconst factor = 1;\nconst offset = 0;\n\nfunction setup() {\n  return {\n    input: [\"SeasonalWater_Cover_fraction\", \"dataMask\"],\n    output: [\n      { id: \"default\", bands: 4, sampleType: \"UINT8\" },\n      { id: \"index\", bands: 1, sampleType: \"FLOAT32\" },\n      { id: \"eobrowserStats\", bands: 2, sampleType: \"FLOAT32\" },\n      { id: \"dataMask\", bands: 1 },\n    ],\n  };\n}\n\nfunction evaluatePixel(samples) {\n  var originalValue = samples.SeasonalWater_Cover_fraction;\n\n  let val = originalValue * factor + offset;\n\n  let dataMask = samples.dataMask;\n\n  const indexVal = dataMask === 1 ? val : NaN;\n  const imgVals = visualizer.process(originalValue);\n\n  return {\n    default: imgVals.concat(dataMask * 255),\n    index: [indexVal],\n    eobrowserStats: [val, dataMask],\n    dataMask: [dataMask],\n  };\n}\n\n// EDIT COLOR BAR\nconst ColorBar = [\n  [0, [68, 1, 84]],\n  [1, [68, 2, 85]],\n  [2, [69, 4, 87]],\n  [3, [69, 5, 88]],\n  [4, [70, 7, 90]],\n  [5, [70, 8, 91]],\n  [6, [70, 10, 92]],\n  [7, [70, 11, 94]],\n  [8, [71, 13, 95]],\n  [9, [71, 14, 96]],\n  [10, [71, 16, 97]],\n  [11, [71, 17, 99]],\n  [12, [71, 19, 100]],\n  [13, [72, 20, 101]],\n  [14, [72, 22, 102]],\n  [15, [72, 23, 103]],\n  [16, [72, 24, 104]],\n  [17, [72, 26, 105]],\n  [18, [72, 27, 106]],\n  [19, [72, 28, 107]],\n  [20, [72, 29, 108]],\n  [21, [72, 31, 109]],\n  [22, [72, 32, 110]],\n  [23, [72, 33, 111]],\n  [24, [72, 34, 111]],\n  [25, [71, 36, 112]],\n  [26, [71, 37, 113]],\n  [27, [71, 38, 114]],\n  [28, [71, 39, 114]],\n  [29, [71, 40, 115]],\n  [30, [71, 42, 116]],\n  [31, [70, 43, 116]],\n  [32, [70, 44, 117]],\n  [33, [70, 45, 118]],\n  [34, [70, 46, 118]],\n  [35, [69, 47, 119]],\n  [36, [69, 48, 119]],\n  [37, [69, 50, 120]],\n  [38, [68, 51, 120]],\n  [39, [68, 52, 121]],\n  [40, [68, 53, 121]],\n  [41, [67, 54, 122]],\n  [42, [67, 55, 122]],\n  [43, [66, 56, 123]],\n  [44, [66, 58, 123]],\n  [45, [65, 59, 124]],\n  [46, [65, 60, 124]],\n  [47, [64, 61, 124]],\n  [48, [64, 62, 125]],\n  [49, [63, 63, 125]],\n  [50, [62, 64, 125]],\n  [51, [62, 65, 125]],\n  [52, [61, 66, 126]],\n  [53, [61, 67, 126]],\n  [54, [60, 68, 126]],\n  [55, [59, 69, 126]],\n  [56, [59, 70, 126]],\n  [57, [58, 71, 126]],\n  [58, [57, 72, 126]],\n  [59, [57, 73, 126]],\n  [60, [56, 74, 126]],\n  [61, [55, 75, 126]],\n  [62, [55, 76, 126]],\n  [63, [54, 77, 126]],\n  [64, [53, 78, 126]],\n  [65, [52, 79, 126]],\n  [66, [52, 80, 126]],\n  [67, [51, 81, 126]],\n  [68, [50, 82, 126]],\n  [69, [49, 83, 126]],\n  [70, [49, 84, 126]],\n  [71, [48, 85, 126]],\n  [72, [47, 86, 126]],\n  [73, [46, 87, 126]],\n  [74, [46, 88, 126]],\n  [75, [45, 89, 126]],\n  [76, [44, 90, 126]],\n  [77, [43, 91, 126]],\n  [78, [42, 92, 126]],\n  [79, [42, 93, 126]],\n  [80, [41, 94, 126]],\n  [81, [40, 95, 125]],\n  [82, [39, 96, 125]],\n  [83, [39, 97, 125]],\n  [84, [38, 98, 125]],\n  [85, [37, 99, 125]],\n  [86, [36, 100, 124]],\n  [87, [36, 101, 124]],\n  [88, [35, 102, 124]],\n  [89, [34, 103, 123]],\n  [90, [33, 104, 123]],\n  [91, [33, 105, 123]],\n  [92, [32, 106, 122]],\n  [93, [31, 107, 122]],\n  [94, [30, 108, 121]],\n  [95, [30, 109, 121]],\n  [96, [29, 110, 120]],\n  [97, [28, 111, 120]],\n  [98, [27, 112, 119]],\n  [99, [27, 113, 119]],\n  [100, [26, 114, 118]],\n];\nconst visualizer = new ColorRampVisualizer(ColorBar);\n",
                "legend": {
                    "type": "continuous",
                    "title": "SeasonalWater_Cover_fraction",
                    "gradients": [
                        {
                            "color": "rgb(26.67%,0.39%,32.94%)",
                            "label": 0,
                            "position": 0
                        },
                        {
                            "color": "rgb(10.2%,44.71%,46.27%)",
                            "label": 100,
                            "position": 100
                        }
                    ],
                    "maxPosition": 100,
                    "minPosition": 0
                }
            }
        ],
        "orderHint": 0,
        "instanceId": "175a80-YOUR-INSTANCEID-HERE",
        "lastUpdated": "2025-05-15T11:41:31.456683Z",
        "collectionType": "CUSTOM",
        "datasetSourceId": 10,
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "collectionId": "35fecf-YOUR-INSTANCEID-HERE",
            "type": "CUSTOM"
        }
    },
    {
        "id": "Shrub_Cover_Fraction",
        "title": "Fractional Cover: Shrub",
        "description": "Percentage of 100m pixel that is covered by shrubs",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nconst factor = 1;\nconst offset = 0;\n\nfunction setup() {\n  return {\n    input: [\"Shrub_Cover_Fraction\", \"dataMask\"],\n    output: [\n      { id: \"default\", bands: 4, sampleType: \"UINT8\" },\n      { id: \"index\", bands: 1, sampleType: \"FLOAT32\" },\n      { id: \"eobrowserStats\", bands: 2, sampleType: \"FLOAT32\" },\n      { id: \"dataMask\", bands: 1 },\n    ],\n  };\n}\n\nfunction evaluatePixel(samples) {\n  var originalValue = samples.Shrub_Cover_Fraction;\n\n  let val = originalValue * factor + offset;\n\n  let dataMask = samples.dataMask;\n\n  const indexVal = dataMask === 1 ? val : NaN;\n  const imgVals = visualizer.process(originalValue);\n\n  return {\n    default: imgVals.concat(dataMask * 255),\n    index: [indexVal],\n    eobrowserStats: [val, dataMask],\n    dataMask: [dataMask],\n  };\n}\n\n// EDIT COLOR BAR\nconst ColorBar = [\n  [0, [68, 1, 84]],\n  [1, [68, 2, 85]],\n  [2, [69, 4, 87]],\n  [3, [69, 5, 88]],\n  [4, [70, 7, 90]],\n  [5, [70, 8, 91]],\n  [6, [70, 10, 92]],\n  [7, [70, 11, 94]],\n  [8, [71, 13, 95]],\n  [9, [71, 14, 96]],\n  [10, [71, 16, 97]],\n  [11, [71, 17, 99]],\n  [12, [71, 19, 100]],\n  [13, [72, 20, 101]],\n  [14, [72, 22, 102]],\n  [15, [72, 23, 103]],\n  [16, [72, 24, 104]],\n  [17, [72, 26, 105]],\n  [18, [72, 27, 106]],\n  [19, [72, 28, 107]],\n  [20, [72, 29, 108]],\n  [21, [72, 31, 109]],\n  [22, [72, 32, 110]],\n  [23, [72, 33, 111]],\n  [24, [72, 34, 111]],\n  [25, [71, 36, 112]],\n  [26, [71, 37, 113]],\n  [27, [71, 38, 114]],\n  [28, [71, 39, 114]],\n  [29, [71, 40, 115]],\n  [30, [71, 42, 116]],\n  [31, [70, 43, 116]],\n  [32, [70, 44, 117]],\n  [33, [70, 45, 118]],\n  [34, [70, 46, 118]],\n  [35, [69, 47, 119]],\n  [36, [69, 48, 119]],\n  [37, [69, 50, 120]],\n  [38, [68, 51, 120]],\n  [39, [68, 52, 121]],\n  [40, [68, 53, 121]],\n  [41, [67, 54, 122]],\n  [42, [67, 55, 122]],\n  [43, [66, 56, 123]],\n  [44, [66, 58, 123]],\n  [45, [65, 59, 124]],\n  [46, [65, 60, 124]],\n  [47, [64, 61, 124]],\n  [48, [64, 62, 125]],\n  [49, [63, 63, 125]],\n  [50, [62, 64, 125]],\n  [51, [62, 65, 125]],\n  [52, [61, 66, 126]],\n  [53, [61, 67, 126]],\n  [54, [60, 68, 126]],\n  [55, [59, 69, 126]],\n  [56, [59, 70, 126]],\n  [57, [58, 71, 126]],\n  [58, [57, 72, 126]],\n  [59, [57, 73, 126]],\n  [60, [56, 74, 126]],\n  [61, [55, 75, 126]],\n  [62, [55, 76, 126]],\n  [63, [54, 77, 126]],\n  [64, [53, 78, 126]],\n  [65, [52, 79, 126]],\n  [66, [52, 80, 126]],\n  [67, [51, 81, 126]],\n  [68, [50, 82, 126]],\n  [69, [49, 83, 126]],\n  [70, [49, 84, 126]],\n  [71, [48, 85, 126]],\n  [72, [47, 86, 126]],\n  [73, [46, 87, 126]],\n  [74, [46, 88, 126]],\n  [75, [45, 89, 126]],\n  [76, [44, 90, 126]],\n  [77, [43, 91, 126]],\n  [78, [42, 92, 126]],\n  [79, [42, 93, 126]],\n  [80, [41, 94, 126]],\n  [81, [40, 95, 125]],\n  [82, [39, 96, 125]],\n  [83, [39, 97, 125]],\n  [84, [38, 98, 125]],\n  [85, [37, 99, 125]],\n  [86, [36, 100, 124]],\n  [87, [36, 101, 124]],\n  [88, [35, 102, 124]],\n  [89, [34, 103, 123]],\n  [90, [33, 104, 123]],\n  [91, [33, 105, 123]],\n  [92, [32, 106, 122]],\n  [93, [31, 107, 122]],\n  [94, [30, 108, 121]],\n  [95, [30, 109, 121]],\n  [96, [29, 110, 120]],\n  [97, [28, 111, 120]],\n  [98, [27, 112, 119]],\n  [99, [27, 113, 119]],\n  [100, [26, 114, 118]],\n];\nconst visualizer = new ColorRampVisualizer(ColorBar);\n",
                "legend": {
                    "type": "continuous",
                    "title": "Shrub_Cover_Fraction",
                    "gradients": [
                        {
                            "color": "rgb(26.67%,0.39%,32.94%)",
                            "label": 0,
                            "position": 0
                        },
                        {
                            "color": "rgb(10.2%,44.71%,46.27%)",
                            "label": 100,
                            "position": 100
                        }
                    ],
                    "maxPosition": 100,
                    "minPosition": 0
                }
            }
        ],
        "orderHint": 0,
        "instanceId": "175a80-YOUR-INSTANCEID-HERE",
        "lastUpdated": "2025-05-15T11:41:46.644130Z",
        "collectionType": "CUSTOM",
        "datasetSourceId": 10,
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "collectionId": "35fecf-YOUR-INSTANCEID-HERE",
            "type": "CUSTOM"
        }
    },
    {
        "id": "Snow_Cover_Fraction",
        "title": "Fractional Cover: Snow",
        "description": "Percentage of 100m pixel that is covered by snow",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nconst factor = 1;\nconst offset = 0;\n\nfunction setup() {\n  return {\n    input: [\"Snow_Cover_Fraction\", \"dataMask\"],\n    output: [\n      { id: \"default\", bands: 4, sampleType: \"UINT8\" },\n      { id: \"index\", bands: 1, sampleType: \"FLOAT32\" },\n      { id: \"eobrowserStats\", bands: 2, sampleType: \"FLOAT32\" },\n      { id: \"dataMask\", bands: 1 },\n    ],\n  };\n}\n\nfunction evaluatePixel(samples) {\n  var originalValue = samples.Snow_Cover_Fraction;\n\n  let val = originalValue * factor + offset;\n\n  let dataMask = samples.dataMask;\n\n  const indexVal = dataMask === 1 ? val : NaN;\n  const imgVals = visualizer.process(originalValue);\n\n  return {\n    default: imgVals.concat(dataMask * 255),\n    index: [indexVal],\n    eobrowserStats: [val, dataMask],\n    dataMask: [dataMask],\n  };\n}\n\n// EDIT COLOR BAR\nconst ColorBar = [\n  [0, [68, 1, 84]],\n  [1, [68, 2, 85]],\n  [2, [69, 4, 87]],\n  [3, [69, 5, 88]],\n  [4, [70, 7, 90]],\n  [5, [70, 8, 91]],\n  [6, [70, 10, 92]],\n  [7, [70, 11, 94]],\n  [8, [71, 13, 95]],\n  [9, [71, 14, 96]],\n  [10, [71, 16, 97]],\n  [11, [71, 17, 99]],\n  [12, [71, 19, 100]],\n  [13, [72, 20, 101]],\n  [14, [72, 22, 102]],\n  [15, [72, 23, 103]],\n  [16, [72, 24, 104]],\n  [17, [72, 26, 105]],\n  [18, [72, 27, 106]],\n  [19, [72, 28, 107]],\n  [20, [72, 29, 108]],\n  [21, [72, 31, 109]],\n  [22, [72, 32, 110]],\n  [23, [72, 33, 111]],\n  [24, [72, 34, 111]],\n  [25, [71, 36, 112]],\n  [26, [71, 37, 113]],\n  [27, [71, 38, 114]],\n  [28, [71, 39, 114]],\n  [29, [71, 40, 115]],\n  [30, [71, 42, 116]],\n  [31, [70, 43, 116]],\n  [32, [70, 44, 117]],\n  [33, [70, 45, 118]],\n  [34, [70, 46, 118]],\n  [35, [69, 47, 119]],\n  [36, [69, 48, 119]],\n  [37, [69, 50, 120]],\n  [38, [68, 51, 120]],\n  [39, [68, 52, 121]],\n  [40, [68, 53, 121]],\n  [41, [67, 54, 122]],\n  [42, [67, 55, 122]],\n  [43, [66, 56, 123]],\n  [44, [66, 58, 123]],\n  [45, [65, 59, 124]],\n  [46, [65, 60, 124]],\n  [47, [64, 61, 124]],\n  [48, [64, 62, 125]],\n  [49, [63, 63, 125]],\n  [50, [62, 64, 125]],\n  [51, [62, 65, 125]],\n  [52, [61, 66, 126]],\n  [53, [61, 67, 126]],\n  [54, [60, 68, 126]],\n  [55, [59, 69, 126]],\n  [56, [59, 70, 126]],\n  [57, [58, 71, 126]],\n  [58, [57, 72, 126]],\n  [59, [57, 73, 126]],\n  [60, [56, 74, 126]],\n  [61, [55, 75, 126]],\n  [62, [55, 76, 126]],\n  [63, [54, 77, 126]],\n  [64, [53, 78, 126]],\n  [65, [52, 79, 126]],\n  [66, [52, 80, 126]],\n  [67, [51, 81, 126]],\n  [68, [50, 82, 126]],\n  [69, [49, 83, 126]],\n  [70, [49, 84, 126]],\n  [71, [48, 85, 126]],\n  [72, [47, 86, 126]],\n  [73, [46, 87, 126]],\n  [74, [46, 88, 126]],\n  [75, [45, 89, 126]],\n  [76, [44, 90, 126]],\n  [77, [43, 91, 126]],\n  [78, [42, 92, 126]],\n  [79, [42, 93, 126]],\n  [80, [41, 94, 126]],\n  [81, [40, 95, 125]],\n  [82, [39, 96, 125]],\n  [83, [39, 97, 125]],\n  [84, [38, 98, 125]],\n  [85, [37, 99, 125]],\n  [86, [36, 100, 124]],\n  [87, [36, 101, 124]],\n  [88, [35, 102, 124]],\n  [89, [34, 103, 123]],\n  [90, [33, 104, 123]],\n  [91, [33, 105, 123]],\n  [92, [32, 106, 122]],\n  [93, [31, 107, 122]],\n  [94, [30, 108, 121]],\n  [95, [30, 109, 121]],\n  [96, [29, 110, 120]],\n  [97, [28, 111, 120]],\n  [98, [27, 112, 119]],\n  [99, [27, 113, 119]],\n  [100, [26, 114, 118]],\n];\nconst visualizer = new ColorRampVisualizer(ColorBar);\n",
                "legend": {
                    "type": "continuous",
                    "title": "Snow_Cover_Fraction",
                    "gradients": [
                        {
                            "color": "rgb(26.67%,0.39%,32.94%)",
                            "label": 0,
                            "position": 0
                        },
                        {
                            "color": "rgb(10.2%,44.71%,46.27%)",
                            "label": 100,
                            "position": 100
                        }
                    ],
                    "maxPosition": 100,
                    "minPosition": 0
                }
            }
        ],
        "orderHint": 0,
        "instanceId": "175a80-YOUR-INSTANCEID-HERE",
        "lastUpdated": "2025-05-15T11:42:05.117573Z",
        "collectionType": "CUSTOM",
        "datasetSourceId": 10,
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "collectionId": "35fecf-YOUR-INSTANCEID-HERE",
            "type": "CUSTOM"
        }
    },
    {
        "id": "Tree_Cover_Fraction",
        "title": "Fractional Cover: Forest / Tree",
        "description": "Percentage of 100m pixel that is covered by forests or trees",
        "styles": [
            {
                "name": "default",
                "description": "Default layer style",
                "evalScript": "//VERSION=3\nconst factor = 1;\nconst offset = 0;\n\nfunction setup() {\n  return {\n    input: [\"Tree_Cover_Fraction\", \"dataMask\"],\n    output: [\n      { id: \"default\", bands: 4, sampleType: \"UINT8\" },\n      { id: \"index\", bands: 1, sampleType: \"FLOAT32\" },\n      { id: \"eobrowserStats\", bands: 2, sampleType: \"FLOAT32\" },\n      { id: \"dataMask\", bands: 1 },\n    ],\n  };\n}\n\nfunction evaluatePixel(samples) {\n  var originalValue = samples.Tree_Cover_Fraction;\n\n  let val = originalValue * factor + offset;\n\n  let dataMask = samples.dataMask;\n\n  const indexVal = dataMask === 1 ? val : NaN;\n  const imgVals = visualizer.process(originalValue);\n\n  return {\n    default: imgVals.concat(dataMask * 255),\n    index: [indexVal],\n    eobrowserStats: [val, dataMask],\n    dataMask: [dataMask],\n  };\n}\n\n// EDIT COLOR BAR\nconst ColorBar = [\n  [0, [68, 1, 84]],\n  [1, [68, 2, 85]],\n  [2, [69, 4, 87]],\n  [3, [69, 5, 88]],\n  [4, [70, 7, 90]],\n  [5, [70, 8, 91]],\n  [6, [70, 10, 92]],\n  [7, [70, 11, 94]],\n  [8, [71, 13, 95]],\n  [9, [71, 14, 96]],\n  [10, [71, 16, 97]],\n  [11, [71, 17, 99]],\n  [12, [71, 19, 100]],\n  [13, [72, 20, 101]],\n  [14, [72, 22, 102]],\n  [15, [72, 23, 103]],\n  [16, [72, 24, 104]],\n  [17, [72, 26, 105]],\n  [18, [72, 27, 106]],\n  [19, [72, 28, 107]],\n  [20, [72, 29, 108]],\n  [21, [72, 31, 109]],\n  [22, [72, 32, 110]],\n  [23, [72, 33, 111]],\n  [24, [72, 34, 111]],\n  [25, [71, 36, 112]],\n  [26, [71, 37, 113]],\n  [27, [71, 38, 114]],\n  [28, [71, 39, 114]],\n  [29, [71, 40, 115]],\n  [30, [71, 42, 116]],\n  [31, [70, 43, 116]],\n  [32, [70, 44, 117]],\n  [33, [70, 45, 118]],\n  [34, [70, 46, 118]],\n  [35, [69, 47, 119]],\n  [36, [69, 48, 119]],\n  [37, [69, 50, 120]],\n  [38, [68, 51, 120]],\n  [39, [68, 52, 121]],\n  [40, [68, 53, 121]],\n  [41, [67, 54, 122]],\n  [42, [67, 55, 122]],\n  [43, [66, 56, 123]],\n  [44, [66, 58, 123]],\n  [45, [65, 59, 124]],\n  [46, [65, 60, 124]],\n  [47, [64, 61, 124]],\n  [48, [64, 62, 125]],\n  [49, [63, 63, 125]],\n  [50, [62, 64, 125]],\n  [51, [62, 65, 125]],\n  [52, [61, 66, 126]],\n  [53, [61, 67, 126]],\n  [54, [60, 68, 126]],\n  [55, [59, 69, 126]],\n  [56, [59, 70, 126]],\n  [57, [58, 71, 126]],\n  [58, [57, 72, 126]],\n  [59, [57, 73, 126]],\n  [60, [56, 74, 126]],\n  [61, [55, 75, 126]],\n  [62, [55, 76, 126]],\n  [63, [54, 77, 126]],\n  [64, [53, 78, 126]],\n  [65, [52, 79, 126]],\n  [66, [52, 80, 126]],\n  [67, [51, 81, 126]],\n  [68, [50, 82, 126]],\n  [69, [49, 83, 126]],\n  [70, [49, 84, 126]],\n  [71, [48, 85, 126]],\n  [72, [47, 86, 126]],\n  [73, [46, 87, 126]],\n  [74, [46, 88, 126]],\n  [75, [45, 89, 126]],\n  [76, [44, 90, 126]],\n  [77, [43, 91, 126]],\n  [78, [42, 92, 126]],\n  [79, [42, 93, 126]],\n  [80, [41, 94, 126]],\n  [81, [40, 95, 125]],\n  [82, [39, 96, 125]],\n  [83, [39, 97, 125]],\n  [84, [38, 98, 125]],\n  [85, [37, 99, 125]],\n  [86, [36, 100, 124]],\n  [87, [36, 101, 124]],\n  [88, [35, 102, 124]],\n  [89, [34, 103, 123]],\n  [90, [33, 104, 123]],\n  [91, [33, 105, 123]],\n  [92, [32, 106, 122]],\n  [93, [31, 107, 122]],\n  [94, [30, 108, 121]],\n  [95, [30, 109, 121]],\n  [96, [29, 110, 120]],\n  [97, [28, 111, 120]],\n  [98, [27, 112, 119]],\n  [99, [27, 113, 119]],\n  [100, [26, 114, 118]],\n];\nconst visualizer = new ColorRampVisualizer(ColorBar);\n",
                "legend": {
                    "type": "continuous",
                    "title": "Tree_Cover_Fraction",
                    "gradients": [
                        {
                            "color": "rgb(26.67%,0.39%,32.94%)",
                            "label": 0,
                            "position": 0
                        },
                        {
                            "color": "rgb(10.2%,44.71%,46.27%)",
                            "label": 100,
                            "position": 100
                        }
                    ],
                    "maxPosition": 100,
                    "minPosition": 0
                }
            }
        ],
        "orderHint": 0,
        "instanceId": "175a80-YOUR-INSTANCEID-HERE",
        "lastUpdated": "2025-05-15T11:38:18.751328Z",
        "collectionType": "CUSTOM",
        "datasetSourceId": 10,
        "defaultStyleName": "default",
        "datasourceDefaults": {
            "mosaickingOrder": "mostRecent",
            "temporal": false,
            "collectionId": "35fecf-YOUR-INSTANCEID-HERE",
            "type": "CUSTOM"
        }
    }
]